
Heizkoerperthermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000cc8  00000d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800130  00800130  00000d8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000208d  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcf  00000000  00000000  00003221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001964  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c14  00000000  00000000  00005954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e7f  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001766  00000000  00000000  000073e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00008b4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	d3 c5       	rjmp	.+2982   	; 0xbb6 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	6b c5       	rjmp	.+2774   	; 0xaee <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	f6 c5       	rjmp	.+3052   	; 0xc1e <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ec       	ldi	r30, 0xC8	; 200
  48:	fc e0       	ldi	r31, 0x0C	; 12
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 33       	cpi	r26, 0x30	; 48
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e3       	ldi	r26, 0x30	; 48
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 34       	cpi	r26, 0x40	; 64
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b1 d2       	rcall	.+1378   	; 0x5ca <main>
  68:	2d c6       	rjmp	.+3162   	; 0xcc4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Display_HardwareInit>:
	Display_RS_Low();		//RS-Leitung auf low, Befehls-Register vom Display wird angewählt

	Display_Transfer4BitData(adresse);	//Funktionscode wird übertragen
	Display_RS_High();		//RS-Leitung geht auf high
	Display_delay(DISPLAY_SET_RAM_ADRESSE_DELAY);	//warten auf das Ausführen des Befehls
}
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	d4 d0       	rcall	.+424    	; 0x21e <Display_DATA_Output>
  76:	6d d0       	rcall	.+218    	; 0x152 <Display_RS_Output>
  78:	9f d0       	rcall	.+318    	; 0x1b8 <Display_EN_Output>
  7a:	00 00       	nop
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

00000082 <Display_delay>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	69 87       	std	Y+9, r22	; 0x09
  98:	7a 87       	std	Y+10, r23	; 0x0a
  9a:	8b 87       	std	Y+11, r24	; 0x0b
  9c:	9c 87       	std	Y+12, r25	; 0x0c
  9e:	89 85       	ldd	r24, Y+9	; 0x09
  a0:	9a 85       	ldd	r25, Y+10	; 0x0a
  a2:	ab 85       	ldd	r26, Y+11	; 0x0b
  a4:	bc 85       	ldd	r27, Y+12	; 0x0c
  a6:	8d 83       	std	Y+5, r24	; 0x05
  a8:	9e 83       	std	Y+6, r25	; 0x06
  aa:	af 83       	std	Y+7, r26	; 0x07
  ac:	b8 87       	std	Y+8, r27	; 0x08
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	1a 82       	std	Y+2, r1	; 0x02
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	1c 82       	std	Y+4, r1	; 0x04
  b6:	0b c0       	rjmp	.+22     	; 0xce <Display_delay+0x4c>
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	ab 81       	ldd	r26, Y+3	; 0x03
  be:	bc 81       	ldd	r27, Y+4	; 0x04
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	9a 83       	std	Y+2, r25	; 0x02
  ca:	ab 83       	std	Y+3, r26	; 0x03
  cc:	bc 83       	std	Y+4, r27	; 0x04
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	3a 81       	ldd	r19, Y+2	; 0x02
  d2:	4b 81       	ldd	r20, Y+3	; 0x03
  d4:	5c 81       	ldd	r21, Y+4	; 0x04
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	9e 81       	ldd	r25, Y+6	; 0x06
  da:	af 81       	ldd	r26, Y+7	; 0x07
  dc:	b8 85       	ldd	r27, Y+8	; 0x08
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	4a 07       	cpc	r20, r26
  e4:	5b 07       	cpc	r21, r27
  e6:	40 f3       	brcs	.-48     	; 0xb8 <Display_delay+0x36>
  e8:	00 00       	nop
  ea:	2c 96       	adiw	r28, 0x0c	; 12
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <Display_Aus>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2a e2       	ldi	r18, 0x2A	; 42
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	20 68       	ori	r18, 0x80	; 128
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	2b e2       	ldi	r18, 0x2B	; 43
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	2f 77       	andi	r18, 0x7F	; 127
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
 128:	00 00       	nop
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <Display_An>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2b e2       	ldi	r18, 0x2B	; 43
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	20 68       	ori	r18, 0x80	; 128
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	00 00       	nop
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <Display_RS_Output>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	24 e2       	ldi	r18, 0x24	; 36
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	21 60       	ori	r18, 0x01	; 1
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	00 00       	nop
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <Display_RS_High>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	85 e2       	ldi	r24, 0x25	; 37
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	25 e2       	ldi	r18, 0x25	; 37
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	20 81       	ld	r18, Z
 188:	21 60       	ori	r18, 0x01	; 1
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	00 00       	nop
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <Display_RS_Low>:
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	25 e2       	ldi	r18, 0x25	; 37
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	2e 7f       	andi	r18, 0xFE	; 254
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
 1b0:	00 00       	nop
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <Display_EN_Output>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	84 e2       	ldi	r24, 0x24	; 36
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	24 e2       	ldi	r18, 0x24	; 36
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	f9 01       	movw	r30, r18
 1ca:	20 81       	ld	r18, Z
 1cc:	22 60       	ori	r18, 0x02	; 2
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
 1d2:	00 00       	nop
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <Display_EN_High>:
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	25 e2       	ldi	r18, 0x25	; 37
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	20 81       	ld	r18, Z
 1ee:	22 60       	ori	r18, 0x02	; 2
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	00 00       	nop
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <Display_EN_Low>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	85 e2       	ldi	r24, 0x25	; 37
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	25 e2       	ldi	r18, 0x25	; 37
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	2d 7f       	andi	r18, 0xFD	; 253
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	00 00       	nop
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <Display_DATA_Output>:
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	87 e2       	ldi	r24, 0x27	; 39
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	27 e2       	ldi	r18, 0x27	; 39
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	2f 60       	ori	r18, 0x0F	; 15
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
 238:	00 00       	nop
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <Display_DATA_BitHigh>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	28 e2       	ldi	r18, 0x28	; 40
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	62 2f       	mov	r22, r18
 25a:	29 81       	ldd	r18, Y+1	; 0x01
 25c:	42 2f       	mov	r20, r18
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <Display_DATA_BitHigh+0x2a>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	4a 95       	dec	r20
 26c:	e2 f7       	brpl	.-8      	; 0x266 <Display_DATA_BitHigh+0x26>
 26e:	26 2b       	or	r18, r22
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
 274:	00 00       	nop
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <Display_DATA_BitLow>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	1f 92       	push	r1
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	28 e2       	ldi	r18, 0x28	; 40
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	f9 01       	movw	r30, r18
 294:	20 81       	ld	r18, Z
 296:	62 2f       	mov	r22, r18
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	42 2f       	mov	r20, r18
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Display_DATA_BitLow+0x2a>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	4a 95       	dec	r20
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Display_DATA_BitLow+0x26>
 2ac:	20 95       	com	r18
 2ae:	26 23       	and	r18, r22
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	00 00       	nop
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Display_Clear>:
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	d2 de       	rcall	.-604    	; 0x6c <Display_HardwareInit>
 2c8:	66 df       	rcall	.-308    	; 0x196 <Display_RS_Low>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	72 d0       	rcall	.+228    	; 0x3b2 <Display_Transfer4BitData>
 2ce:	52 df       	rcall	.-348    	; 0x174 <Display_RS_High>
 2d0:	60 ea       	ldi	r22, 0xA0	; 160
 2d2:	7f e0       	ldi	r23, 0x0F	; 15
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	d4 de       	rcall	.-600    	; 0x82 <Display_delay>
 2da:	00 00       	nop
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <Display_ModeEntry>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	1f 92       	push	r1
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	89 83       	std	Y+1, r24	; 0x01
 2ee:	be de       	rcall	.-644    	; 0x6c <Display_HardwareInit>
 2f0:	52 df       	rcall	.-348    	; 0x196 <Display_RS_Low>
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	5e d0       	rcall	.+188    	; 0x3b2 <Display_Transfer4BitData>
 2f6:	3e df       	rcall	.-388    	; 0x174 <Display_RS_High>
 2f8:	62 e3       	ldi	r22, 0x32	; 50
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	c0 de       	rcall	.-640    	; 0x82 <Display_delay>
 302:	00 00       	nop
 304:	0f 90       	pop	r0
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <Display_Control>:
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	89 83       	std	Y+1, r24	; 0x01
 318:	a9 de       	rcall	.-686    	; 0x6c <Display_HardwareInit>
 31a:	3d df       	rcall	.-390    	; 0x196 <Display_RS_Low>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	49 d0       	rcall	.+146    	; 0x3b2 <Display_Transfer4BitData>
 320:	29 df       	rcall	.-430    	; 0x174 <Display_RS_High>
 322:	62 e3       	ldi	r22, 0x32	; 50
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ab de       	rcall	.-682    	; 0x82 <Display_delay>
 32c:	00 00       	nop
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <Display_SetMPUInterface>:
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	00 d0       	rcall	.+0      	; 0x33c <Display_SetMPUInterface+0x6>
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	8b 83       	std	Y+3, r24	; 0x03
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	91 de       	rcall	.-734    	; 0x6c <Display_HardwareInit>
 34a:	25 df       	rcall	.-438    	; 0x196 <Display_RS_Low>
 34c:	46 df       	rcall	.-372    	; 0x1da <Display_EN_High>
 34e:	1a 82       	std	Y+2, r1	; 0x02
 350:	1c c0       	rjmp	.+56     	; 0x38a <Display_SetMPUInterface+0x54>
 352:	9b 81       	ldd	r25, Y+3	; 0x03
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	89 23       	and	r24, r25
 358:	88 23       	and	r24, r24
 35a:	49 f0       	breq	.+18     	; 0x36e <Display_SetMPUInterface+0x38>
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	80 50       	subi	r24, 0x00	; 0
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	6a df       	rcall	.-300    	; 0x240 <Display_DATA_BitHigh>
 36c:	08 c0       	rjmp	.+16     	; 0x37e <Display_SetMPUInterface+0x48>
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	88 2f       	mov	r24, r24
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	80 50       	subi	r24, 0x00	; 0
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	fc 01       	movw	r30, r24
 37a:	80 81       	ld	r24, Z
 37c:	80 df       	rcall	.-256    	; 0x27e <Display_DATA_BitLow>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	86 95       	lsr	r24
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	8a 83       	std	Y+2, r24	; 0x02
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	08 f3       	brcs	.-62     	; 0x352 <Display_SetMPUInterface+0x1c>
 390:	35 df       	rcall	.-406    	; 0x1fc <Display_EN_Low>
 392:	23 df       	rcall	.-442    	; 0x1da <Display_EN_High>
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	0d d0       	rcall	.+26     	; 0x3b2 <Display_Transfer4BitData>
 398:	ed de       	rcall	.-550    	; 0x174 <Display_RS_High>
 39a:	62 e3       	ldi	r22, 0x32	; 50
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	6f de       	rcall	.-802    	; 0x82 <Display_delay>
 3a4:	00 00       	nop
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <Display_Transfer4BitData>:
//							Display_EN_Low
//Übergebene Parameter	: _8BitData
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_Transfer4BitData(unsigned char _8BitData)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <Display_Transfer4BitData+0x6>
 3b8:	1f 92       	push	r1
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char dummy = 0x80, i;
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	89 83       	std	Y+1, r24	; 0x01

	Display_EN_High();	////EN-Leitung (Read/Write Freigabe) wird auf high gesetzt
 3c4:	0a df       	rcall	.-492    	; 0x1da <Display_EN_High>

	for(i = 0; i < 8; i++)	//die ersten 4 Datenbits werden beschrieben
 3c6:	1a 82       	std	Y+2, r1	; 0x02
 3c8:	21 c0       	rjmp	.+66     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	{
		if(_8BitData & dummy)
 3ca:	9b 81       	ldd	r25, Y+3	; 0x03
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	89 23       	and	r24, r25
 3d0:	88 23       	and	r24, r24
 3d2:	49 f0       	breq	.+18     	; 0x3e6 <Display_Transfer4BitData+0x34>
		{
			Display_DATA_BitHigh(ucDataBit[i]);	//wenn das im Options entsprechend dem dummy Bit
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	80 50       	subi	r24, 0x00	; 0
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	2e df       	rcall	.-420    	; 0x240 <Display_DATA_BitHigh>
 3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <Display_Transfer4BitData+0x44>
		}					//1 ist, so wird das entsprechende Datenbit auf high gesetzt
		else				//ansonsten wird es auf low gesetzt
		{
			Display_DATA_BitLow(ucDataBit[i]);
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 50       	subi	r24, 0x00	; 0
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	fc 01       	movw	r30, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	44 df       	rcall	.-376    	; 0x27e <Display_DATA_BitLow>
		}

		dummy = dummy >> 1;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	86 95       	lsr	r24
 3fa:	89 83       	std	Y+1, r24	; 0x01
		if(i == 3)		//wenn die ersten 4 Bits beschrieben sind,
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	83 30       	cpi	r24, 0x03	; 3
 400:	11 f4       	brne	.+4      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		{
			Display_EN_Low();	//so werden sie vom Displaycontroller gespeichert
 402:	fc de       	rcall	.-520    	; 0x1fc <Display_EN_Low>
			Display_EN_High();	//EN-Leitung (Read/Write Freigabe) wird wieder auf high gesetzt			
 404:	ea de       	rcall	.-556    	; 0x1da <Display_EN_High>
{
	unsigned char dummy = 0x80, i;

	Display_EN_High();	////EN-Leitung (Read/Write Freigabe) wird auf high gesetzt

	for(i = 0; i < 8; i++)	//die ersten 4 Datenbits werden beschrieben
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	88 30       	cpi	r24, 0x08	; 8
 410:	e0 f2       	brcs	.-72     	; 0x3ca <Display_Transfer4BitData+0x18>
			Display_EN_Low();	//so werden sie vom Displaycontroller gespeichert
			Display_EN_High();	//EN-Leitung (Read/Write Freigabe) wird wieder auf high gesetzt			
		}
	}

	Display_EN_Low();	//das low-nibble des Byte wird gespeichert
 412:	f4 de       	rcall	.-536    	; 0x1fc <Display_EN_Low>
}
 414:	00 00       	nop
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <Display_Init>:
//							Display_ModeEntry
//							Display_Control
//Übergebene Parameter	: keine
//----------------------------------------------------------------------------------------------
void Display_Init(void)
{		
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62

	Display_Aus();										//Display-Modul wird ausgeschaltet
 42a:	68 de       	rcall	.-816    	; 0xfc <Display_Aus>
	Display_delay(50000);										//0,05 s Wartezeit für Display-Reset
 42c:	60 e5       	ldi	r22, 0x50	; 80
 42e:	73 ec       	ldi	r23, 0xC3	; 195
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	26 de       	rcall	.-948    	; 0x82 <Display_delay>
	Display_An();										//Display-Modul wird eingeschaltet
 436:	7c de       	rcall	.-776    	; 0x130 <Display_An>

	//Initialisierung beginnt													
	Display_delay(30000);										//Verzögerung > 30 ms
 438:	60 e3       	ldi	r22, 0x30	; 48
 43a:	75 e7       	ldi	r23, 0x75	; 117
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	20 de       	rcall	.-960    	; 0x82 <Display_delay>
	Display_SetMPUInterface(DISPLAY_MPU_4BIT_2_LINES_5x7_DOTS);
 442:	88 e2       	ldi	r24, 0x28	; 40
 444:	78 df       	rcall	.-272    	; 0x336 <Display_SetMPUInterface>
	//die Kommunikation findet auf 4 Bit statt, 2zeiliges Display, 5x7 Pixel große Buchstaben
	Display_Clear();	//der gesamte Inhalt des Displays wird gelöscht
 446:	3b df       	rcall	.-394    	; 0x2be <Display_Clear>
	Display_ModeEntry(DISPLAY_MODE_INCR_SHIFT_OFF);	//der Cursor wird um eine stelle inkrementiert,
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	4b df       	rcall	.-362    	; 0x2e2 <Display_ModeEntry>
													//die Anzeige wird nicht verschoben
	Display_Control(DISPLAY_ON_CURSOR_ON_BLINK_OFF);//Anzeige und Cursor sind eingeblendet,
 44c:	8e e0       	ldi	r24, 0x0E	; 14
 44e:	5e df       	rcall	.-324    	; 0x30c <Display_Control>
													//Cursor blinkt nicht
}
 450:	00 00       	nop
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <GerneralInit>:

//Variables

//Definition of funcitons

void GerneralInit(void){
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	//Date :			27.10.2022
	//Autor:			Moritz
	//Source:			
	//Status:			not testet
	//--------------------------------
	Display_Init();
 460:	e0 df       	rcall	.-64     	; 0x422 <Display_Init>
	LEDInit();
 462:	75 d0       	rcall	.+234    	; 0x54e <LEDInit>
	//CAN_Filter_Init();
	InitTimer2CTC();
 464:	88 d3       	rcall	.+1808   	; 0xb76 <InitTimer2CTC>
	WS2812_Init();
 466:	0d d4       	rcall	.+2074   	; 0xc82 <WS2812_Init>
	keys_Init();
 468:	05 d0       	rcall	.+10     	; 0x474 <keys_Init>
	Timer1_Init();
 46a:	18 d3       	rcall	.+1584   	; 0xa9c <Timer1_Init>
	
}
 46c:	00 00       	nop
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <keys_Init>:
unsigned char ucS3_old, ucS3_new = 0xFF;
unsigned char ucS4_old, ucS4_new = 0xFF;


//Definition of functions=======================================
void keys_Init(void){
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	//Version:			1
	//Datum:			220408
	//Autor:			mh
	//Status:			ok
	//--------------------------------
	DDRD &= ~((1<<PD5) | (1<<PD4) | (1<<PD3) | (1<<PD2)); //Pin 5,4,3 und 2 wird zu eingang
 47c:	8a e2       	ldi	r24, 0x2A	; 42
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	2a e2       	ldi	r18, 0x2A	; 42
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	f9 01       	movw	r30, r18
 486:	20 81       	ld	r18, Z
 488:	23 7c       	andi	r18, 0xC3	; 195
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
}
 48e:	00 00       	nop
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <keys_get_state>:
//==============================================================
unsigned char keys_get_state(void){
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
	//Datum:			220408
	//Autor:			mh
	//Status:			ok
	//----------------------------------------------------
	
	ucS1_old = ucS1_new;
 49e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ucS1_new>
 4a2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ucS1_old>
	ucS2_old = ucS2_new;
 4a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucS2_new>
 4aa:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ucS2_old>
	ucS3_old = ucS3_new;
 4ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ucS3_new>
 4b2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ucS3_old>
	ucS4_old = ucS4_new;
 4b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ucS4_new>
 4ba:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ucS4_old>
	
	ucS1_new = PIND & (1<<PD5);
 4be:	89 e2       	ldi	r24, 0x29	; 41
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	80 81       	ld	r24, Z
 4c6:	80 72       	andi	r24, 0x20	; 32
 4c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ucS1_new>
	ucS2_new = PIND & (1<<PD4);
 4cc:	89 e2       	ldi	r24, 0x29	; 41
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	80 71       	andi	r24, 0x10	; 16
 4d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ucS2_new>
	ucS3_new = PIND & (1<<PD3);
 4da:	89 e2       	ldi	r24, 0x29	; 41
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	80 81       	ld	r24, Z
 4e2:	88 70       	andi	r24, 0x08	; 8
 4e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ucS3_new>
	ucS4_new = PIND & (1<<PD2);
 4e8:	89 e2       	ldi	r24, 0x29	; 41
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	fc 01       	movw	r30, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	84 70       	andi	r24, 0x04	; 4
 4f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ucS4_new>
	
	if((!ucS1_new && ucS1_old)){
 4f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ucS1_new>
 4fa:	88 23       	and	r24, r24
 4fc:	31 f4       	brne	.+12     	; 0x50a <__stack+0xb>
 4fe:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ucS1_old>
 502:	88 23       	and	r24, r24
 504:	11 f0       	breq	.+4      	; 0x50a <__stack+0xb>
		return S1_PRESSED;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	1f c0       	rjmp	.+62     	; 0x548 <__stack+0x49>
	}
	
	if((!ucS2_new && ucS2_old)){
 50a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ucS2_new>
 50e:	88 23       	and	r24, r24
 510:	31 f4       	brne	.+12     	; 0x51e <__stack+0x1f>
 512:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ucS2_old>
 516:	88 23       	and	r24, r24
 518:	11 f0       	breq	.+4      	; 0x51e <__stack+0x1f>
		 return S2_PRESSED;
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	15 c0       	rjmp	.+42     	; 0x548 <__stack+0x49>
	}
	
	if((!ucS3_new && ucS3_old)){
 51e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ucS3_new>
 522:	88 23       	and	r24, r24
 524:	31 f4       	brne	.+12     	; 0x532 <__stack+0x33>
 526:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ucS3_old>
 52a:	88 23       	and	r24, r24
 52c:	11 f0       	breq	.+4      	; 0x532 <__stack+0x33>
		return S3_PRESSED;
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	0b c0       	rjmp	.+22     	; 0x548 <__stack+0x49>
	}
	
	if((!ucS4_new && ucS4_old)){
 532:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ucS4_new>
 536:	88 23       	and	r24, r24
 538:	31 f4       	brne	.+12     	; 0x546 <__stack+0x47>
 53a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ucS4_old>
 53e:	88 23       	and	r24, r24
 540:	11 f0       	breq	.+4      	; 0x546 <__stack+0x47>
		return S4_PRESSED;
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	01 c0       	rjmp	.+2      	; 0x548 <__stack+0x49>
	}
	
	return KEYS_NOT_PRESSED;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <LEDInit>:
 */ 
 #include <avr/io.h>
 #include "LED.h"

 void LEDInit()
 {
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<DDD6);
 556:	8a e2       	ldi	r24, 0x2A	; 42
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	2a e2       	ldi	r18, 0x2A	; 42
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	20 64       	ori	r18, 0x40	; 64
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
	DDRB |= (1<<DDB2);
 568:	84 e2       	ldi	r24, 0x24	; 36
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	24 e2       	ldi	r18, 0x24	; 36
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	24 60       	ori	r18, 0x04	; 4
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
 }
 57a:	00 00       	nop
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <LEDOn>:
 void LEDOn(char color)
 {
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	1f 92       	push	r1
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	89 83       	std	Y+1, r24	; 0x01
	if (color==GREEN)
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	84 31       	cpi	r24, 0x14	; 20
 592:	51 f4       	brne	.+20     	; 0x5a8 <LEDOn+0x26>
	{
		PORTB |= (1<<PB2);
 594:	85 e2       	ldi	r24, 0x25	; 37
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	25 e2       	ldi	r18, 0x25	; 37
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	f9 01       	movw	r30, r18
 59e:	20 81       	ld	r18, Z
 5a0:	24 60       	ori	r18, 0x04	; 4
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
	}
	else if (color==RED)
	{
		PORTD |= (1<<PD6);
	}
 }
 5a6:	0c c0       	rjmp	.+24     	; 0x5c0 <LEDOn+0x3e>
 {
	if (color==GREEN)
	{
		PORTB |= (1<<PB2);
	}
	else if (color==RED)
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	49 f4       	brne	.+18     	; 0x5c0 <LEDOn+0x3e>
	{
		PORTD |= (1<<PD6);
 5ae:	8b e2       	ldi	r24, 0x2B	; 43
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	2b e2       	ldi	r18, 0x2B	; 43
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	f9 01       	movw	r30, r18
 5b8:	20 81       	ld	r18, Z
 5ba:	20 64       	ori	r18, 0x40	; 64
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
	}
 }
 5c0:	00 00       	nop
 5c2:	0f 90       	pop	r0
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <main>:
//Includes
#include "main.h"

//Main function
int main(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	

	
	GerneralInit();
 5d2:	42 df       	rcall	.-380    	; 0x458 <GerneralInit>
	//Can
	MCP2515_Init(MCP2515_1, BAUDRATE_250_KBPS);
 5d4:	25 e0       	ldi	r18, 0x05	; 5
 5d6:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <MCP2515_1>
 5da:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <MCP2515_1+0x1>
 5de:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MCP2515_1+0x2>
 5e2:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <MCP2515_1+0x3>
 5e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <MCP2515_1+0x4>
 5ea:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <MCP2515_1+0x5>
 5ee:	0f d0       	rcall	.+30     	; 0x60e <MCP2515_Init>
	//MCP2515_Set_Filter_Mask(MCP2515_1, &sFilter);
	while (1)
	{
		if(Timer1_get_100msState() == TIMER_TRIGGERED)
 5f0:	b2 d2       	rcall	.+1380   	; 0xb56 <Timer1_get_100msState>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	e9 f7       	brne	.-6      	; 0x5f0 <main+0x26>
		{
			//durchlauf alle 100ms
			//testen der LED
			if (keys_get_state() == S1_PRESSED)
 5f6:	4f df       	rcall	.-354    	; 0x496 <keys_get_state>
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	19 f4       	brne	.+6      	; 0x602 <main+0x38>
			{
				LEDOn(GREEN);	//ECU Board led green
 5fc:	84 e1       	ldi	r24, 0x14	; 20
 5fe:	c1 df       	rcall	.-126    	; 0x582 <LEDOn>
 600:	f7 cf       	rjmp	.-18     	; 0x5f0 <main+0x26>
			}
			
			else if (keys_get_state() == S2_PRESSED)
 602:	49 df       	rcall	.-366    	; 0x496 <keys_get_state>
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	a1 f7       	brne	.-24     	; 0x5f0 <main+0x26>
			{
				LEDOn(RED);	//ECU Board led green
 608:	8a e0       	ldi	r24, 0x0A	; 10
 60a:	bb df       	rcall	.-138    	; 0x582 <LEDOn>
					//LED_red_Off();
				//}
				//
			//}
		//}
	}
 60c:	f1 cf       	rjmp	.-30     	; 0x5f0 <main+0x26>

0000060e <MCP2515_Init>:
//Status: freigegeben
//****************************************************************************************
void MCP2515_OneShotMode(MCP2515_pins sdevice_pins, uint8_t ucone_shot)
{
	MCP2515_Change_Reg(sdevice_pins, CANCTRL, ONE_SHOT_MASK, ucone_shot);
}
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	27 97       	sbiw	r28, 0x07	; 7
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	49 83       	std	Y+1, r20	; 0x01
 624:	5a 83       	std	Y+2, r21	; 0x02
 626:	6b 83       	std	Y+3, r22	; 0x03
 628:	7c 83       	std	Y+4, r23	; 0x04
 62a:	8d 83       	std	Y+5, r24	; 0x05
 62c:	9e 83       	std	Y+6, r25	; 0x06
 62e:	2f 83       	std	Y+7, r18	; 0x07
 630:	49 81       	ldd	r20, Y+1	; 0x01
 632:	5a 81       	ldd	r21, Y+2	; 0x02
 634:	6b 81       	ldd	r22, Y+3	; 0x03
 636:	7c 81       	ldd	r23, Y+4	; 0x04
 638:	8d 81       	ldd	r24, Y+5	; 0x05
 63a:	9e 81       	ldd	r25, Y+6	; 0x06
 63c:	7f d1       	rcall	.+766    	; 0x93c <SPI_Master_SlaveSelectInit>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	43 e0       	ldi	r20, 0x03	; 3
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	31 d1       	rcall	.+610    	; 0x8aa <SPI_Master_Init>
 648:	20 e8       	ldi	r18, 0x80	; 128
 64a:	49 81       	ldd	r20, Y+1	; 0x01
 64c:	5a 81       	ldd	r21, Y+2	; 0x02
 64e:	6b 81       	ldd	r22, Y+3	; 0x03
 650:	7c 81       	ldd	r23, Y+4	; 0x04
 652:	8d 81       	ldd	r24, Y+5	; 0x05
 654:	9e 81       	ldd	r25, Y+6	; 0x06
 656:	a2 d0       	rcall	.+324    	; 0x79c <MCP2515_Set_OpMode>
 658:	2f 81       	ldd	r18, Y+7	; 0x07
 65a:	49 81       	ldd	r20, Y+1	; 0x01
 65c:	5a 81       	ldd	r21, Y+2	; 0x02
 65e:	6b 81       	ldd	r22, Y+3	; 0x03
 660:	7c 81       	ldd	r23, Y+4	; 0x04
 662:	8d 81       	ldd	r24, Y+5	; 0x05
 664:	9e 81       	ldd	r25, Y+6	; 0x06
 666:	ec d0       	rcall	.+472    	; 0x840 <MCP2515_Set_Baudrate>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	49 81       	ldd	r20, Y+1	; 0x01
 66c:	5a 81       	ldd	r21, Y+2	; 0x02
 66e:	6b 81       	ldd	r22, Y+3	; 0x03
 670:	7c 81       	ldd	r23, Y+4	; 0x04
 672:	8d 81       	ldd	r24, Y+5	; 0x05
 674:	9e 81       	ldd	r25, Y+6	; 0x06
 676:	bb d0       	rcall	.+374    	; 0x7ee <MCP2515_Change_ClkOut>
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	49 81       	ldd	r20, Y+1	; 0x01
 67c:	5a 81       	ldd	r21, Y+2	; 0x02
 67e:	6b 81       	ldd	r22, Y+3	; 0x03
 680:	7c 81       	ldd	r23, Y+4	; 0x04
 682:	8d 81       	ldd	r24, Y+5	; 0x05
 684:	9e 81       	ldd	r25, Y+6	; 0x06
 686:	8a d0       	rcall	.+276    	; 0x79c <MCP2515_Set_OpMode>
 688:	00 00       	nop
 68a:	27 96       	adiw	r28, 0x07	; 7
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <MCP2515_Write_Reg>:
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	2b 97       	sbiw	r28, 0x0b	; 11
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	4a 83       	std	Y+2, r20	; 0x02
 6b8:	5b 83       	std	Y+3, r21	; 0x03
 6ba:	6c 83       	std	Y+4, r22	; 0x04
 6bc:	7d 83       	std	Y+5, r23	; 0x05
 6be:	8e 83       	std	Y+6, r24	; 0x06
 6c0:	9f 83       	std	Y+7, r25	; 0x07
 6c2:	28 87       	std	Y+8, r18	; 0x08
 6c4:	09 87       	std	Y+9, r16	; 0x09
 6c6:	fb 86       	std	Y+11, r15	; 0x0b
 6c8:	ea 86       	std	Y+10, r14	; 0x0a
 6ca:	4a 81       	ldd	r20, Y+2	; 0x02
 6cc:	5b 81       	ldd	r21, Y+3	; 0x03
 6ce:	6c 81       	ldd	r22, Y+4	; 0x04
 6d0:	7d 81       	ldd	r23, Y+5	; 0x05
 6d2:	8e 81       	ldd	r24, Y+6	; 0x06
 6d4:	9f 81       	ldd	r25, Y+7	; 0x07
 6d6:	71 d1       	rcall	.+738    	; 0x9ba <SPI_Master_Start>
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	c6 d1       	rcall	.+908    	; 0xa68 <SPI_Master_Write>
 6dc:	88 85       	ldd	r24, Y+8	; 0x08
 6de:	c4 d1       	rcall	.+904    	; 0xa68 <SPI_Master_Write>
 6e0:	19 82       	std	Y+1, r1	; 0x01
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <MCP2515_Write_Reg+0x62>
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	88 2f       	mov	r24, r24
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	2a 85       	ldd	r18, Y+10	; 0x0a
 6ec:	3b 85       	ldd	r19, Y+11	; 0x0b
 6ee:	82 0f       	add	r24, r18
 6f0:	93 1f       	adc	r25, r19
 6f2:	fc 01       	movw	r30, r24
 6f4:	80 81       	ld	r24, Z
 6f6:	b8 d1       	rcall	.+880    	; 0xa68 <SPI_Master_Write>
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	8f 5f       	subi	r24, 0xFF	; 255
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	99 81       	ldd	r25, Y+1	; 0x01
 700:	89 85       	ldd	r24, Y+9	; 0x09
 702:	98 17       	cp	r25, r24
 704:	78 f3       	brcs	.-34     	; 0x6e4 <MCP2515_Write_Reg+0x48>
 706:	4a 81       	ldd	r20, Y+2	; 0x02
 708:	5b 81       	ldd	r21, Y+3	; 0x03
 70a:	6c 81       	ldd	r22, Y+4	; 0x04
 70c:	7d 81       	ldd	r23, Y+5	; 0x05
 70e:	8e 81       	ldd	r24, Y+6	; 0x06
 710:	9f 81       	ldd	r25, Y+7	; 0x07
 712:	7f d1       	rcall	.+766    	; 0xa12 <SPI_Master_Stop>
 714:	00 00       	nop
 716:	2b 96       	adiw	r28, 0x0b	; 11
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	0f 91       	pop	r16
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	08 95       	ret

0000072e <MCP2515_Change_Reg>:
 72e:	ef 92       	push	r14
 730:	0f 93       	push	r16
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	29 97       	sbiw	r28, 0x09	; 9
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
 746:	49 83       	std	Y+1, r20	; 0x01
 748:	5a 83       	std	Y+2, r21	; 0x02
 74a:	6b 83       	std	Y+3, r22	; 0x03
 74c:	7c 83       	std	Y+4, r23	; 0x04
 74e:	8d 83       	std	Y+5, r24	; 0x05
 750:	9e 83       	std	Y+6, r25	; 0x06
 752:	2f 83       	std	Y+7, r18	; 0x07
 754:	08 87       	std	Y+8, r16	; 0x08
 756:	e9 86       	std	Y+9, r14	; 0x09
 758:	49 81       	ldd	r20, Y+1	; 0x01
 75a:	5a 81       	ldd	r21, Y+2	; 0x02
 75c:	6b 81       	ldd	r22, Y+3	; 0x03
 75e:	7c 81       	ldd	r23, Y+4	; 0x04
 760:	8d 81       	ldd	r24, Y+5	; 0x05
 762:	9e 81       	ldd	r25, Y+6	; 0x06
 764:	2a d1       	rcall	.+596    	; 0x9ba <SPI_Master_Start>
 766:	85 e0       	ldi	r24, 0x05	; 5
 768:	7f d1       	rcall	.+766    	; 0xa68 <SPI_Master_Write>
 76a:	8f 81       	ldd	r24, Y+7	; 0x07
 76c:	7d d1       	rcall	.+762    	; 0xa68 <SPI_Master_Write>
 76e:	88 85       	ldd	r24, Y+8	; 0x08
 770:	7b d1       	rcall	.+758    	; 0xa68 <SPI_Master_Write>
 772:	89 85       	ldd	r24, Y+9	; 0x09
 774:	79 d1       	rcall	.+754    	; 0xa68 <SPI_Master_Write>
 776:	49 81       	ldd	r20, Y+1	; 0x01
 778:	5a 81       	ldd	r21, Y+2	; 0x02
 77a:	6b 81       	ldd	r22, Y+3	; 0x03
 77c:	7c 81       	ldd	r23, Y+4	; 0x04
 77e:	8d 81       	ldd	r24, Y+5	; 0x05
 780:	9e 81       	ldd	r25, Y+6	; 0x06
 782:	47 d1       	rcall	.+654    	; 0xa12 <SPI_Master_Stop>
 784:	00 00       	nop
 786:	29 96       	adiw	r28, 0x09	; 9
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	0f 91       	pop	r16
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <MCP2515_Set_OpMode>:
 79c:	ef 92       	push	r14
 79e:	0f 93       	push	r16
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	27 97       	sbiw	r28, 0x07	; 7
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	49 83       	std	Y+1, r20	; 0x01
 7b6:	5a 83       	std	Y+2, r21	; 0x02
 7b8:	6b 83       	std	Y+3, r22	; 0x03
 7ba:	7c 83       	std	Y+4, r23	; 0x04
 7bc:	8d 83       	std	Y+5, r24	; 0x05
 7be:	9e 83       	std	Y+6, r25	; 0x06
 7c0:	2f 83       	std	Y+7, r18	; 0x07
 7c2:	ef 80       	ldd	r14, Y+7	; 0x07
 7c4:	00 ee       	ldi	r16, 0xE0	; 224
 7c6:	2f e0       	ldi	r18, 0x0F	; 15
 7c8:	49 81       	ldd	r20, Y+1	; 0x01
 7ca:	5a 81       	ldd	r21, Y+2	; 0x02
 7cc:	6b 81       	ldd	r22, Y+3	; 0x03
 7ce:	7c 81       	ldd	r23, Y+4	; 0x04
 7d0:	8d 81       	ldd	r24, Y+5	; 0x05
 7d2:	9e 81       	ldd	r25, Y+6	; 0x06
 7d4:	ac df       	rcall	.-168    	; 0x72e <MCP2515_Change_Reg>
 7d6:	00 00       	nop
 7d8:	27 96       	adiw	r28, 0x07	; 7
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	f8 94       	cli
 7de:	de bf       	out	0x3e, r29	; 62
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	cd bf       	out	0x3d, r28	; 61
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	0f 91       	pop	r16
 7ea:	ef 90       	pop	r14
 7ec:	08 95       	ret

000007ee <MCP2515_Change_ClkOut>:
 7ee:	ef 92       	push	r14
 7f0:	0f 93       	push	r16
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	27 97       	sbiw	r28, 0x07	; 7
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	49 83       	std	Y+1, r20	; 0x01
 808:	5a 83       	std	Y+2, r21	; 0x02
 80a:	6b 83       	std	Y+3, r22	; 0x03
 80c:	7c 83       	std	Y+4, r23	; 0x04
 80e:	8d 83       	std	Y+5, r24	; 0x05
 810:	9e 83       	std	Y+6, r25	; 0x06
 812:	2f 83       	std	Y+7, r18	; 0x07
 814:	ef 80       	ldd	r14, Y+7	; 0x07
 816:	07 e0       	ldi	r16, 0x07	; 7
 818:	2f e0       	ldi	r18, 0x0F	; 15
 81a:	49 81       	ldd	r20, Y+1	; 0x01
 81c:	5a 81       	ldd	r21, Y+2	; 0x02
 81e:	6b 81       	ldd	r22, Y+3	; 0x03
 820:	7c 81       	ldd	r23, Y+4	; 0x04
 822:	8d 81       	ldd	r24, Y+5	; 0x05
 824:	9e 81       	ldd	r25, Y+6	; 0x06
 826:	83 df       	rcall	.-250    	; 0x72e <MCP2515_Change_Reg>
 828:	00 00       	nop
 82a:	27 96       	adiw	r28, 0x07	; 7
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	de bf       	out	0x3e, r29	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	cd bf       	out	0x3d, r28	; 61
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	0f 91       	pop	r16
 83c:	ef 90       	pop	r14
 83e:	08 95       	ret

00000840 <MCP2515_Set_Baudrate>:
//Rückgabeparameter:		kein
//Revision:
//Status: freigegeben
//****************************************************************************************
void MCP2515_Set_Baudrate(MCP2515_pins sdevice_pins, uint8_t ucbaud)
{
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	27 97       	sbiw	r28, 0x07	; 7
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	49 83       	std	Y+1, r20	; 0x01
 85c:	5a 83       	std	Y+2, r21	; 0x02
 85e:	6b 83       	std	Y+3, r22	; 0x03
 860:	7c 83       	std	Y+4, r23	; 0x04
 862:	8d 83       	std	Y+5, r24	; 0x05
 864:	9e 83       	std	Y+6, r25	; 0x06
 866:	2f 83       	std	Y+7, r18	; 0x07
	MCP2515_Write_Reg(sdevice_pins, CNF3, 3, ucBaudrate[ucbaud]);
 868:	8f 81       	ldd	r24, Y+7	; 0x07
 86a:	28 2f       	mov	r18, r24
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	c9 01       	movw	r24, r18
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	82 0f       	add	r24, r18
 876:	93 1f       	adc	r25, r19
 878:	89 5e       	subi	r24, 0xE9	; 233
 87a:	9e 4f       	sbci	r25, 0xFE	; 254
 87c:	7c 01       	movw	r14, r24
 87e:	03 e0       	ldi	r16, 0x03	; 3
 880:	28 e2       	ldi	r18, 0x28	; 40
 882:	49 81       	ldd	r20, Y+1	; 0x01
 884:	5a 81       	ldd	r21, Y+2	; 0x02
 886:	6b 81       	ldd	r22, Y+3	; 0x03
 888:	7c 81       	ldd	r23, Y+4	; 0x04
 88a:	8d 81       	ldd	r24, Y+5	; 0x05
 88c:	9e 81       	ldd	r25, Y+6	; 0x06
 88e:	06 df       	rcall	.-500    	; 0x69c <MCP2515_Write_Reg>
}
 890:	00 00       	nop
 892:	27 96       	adiw	r28, 0x07	; 7
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	f8 94       	cli
 898:	de bf       	out	0x3e, r29	; 62
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	cd bf       	out	0x3d, r28	; 61
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	ef 90       	pop	r14
 8a8:	08 95       	ret

000008aa <SPI_Master_Init>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Init(uint8_t ucspi_interrupt, uint8_t ucspi_data_order, uint8_t ucspi_mode, uint8_t ucspi_sck_freq)
{
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <SPI_Master_Init+0x6>
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <SPI_Master_Init+0x8>
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
 8b6:	89 83       	std	Y+1, r24	; 0x01
 8b8:	6a 83       	std	Y+2, r22	; 0x02
 8ba:	4b 83       	std	Y+3, r20	; 0x03
 8bc:	2c 83       	std	Y+4, r18	; 0x04
	SPI_MOSI_DDR_REG |= 1 << SPI_MOSI_BIT;		//MOSI-Pin wird auf Ausgang deklariert
 8be:	84 e2       	ldi	r24, 0x24	; 36
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	24 e2       	ldi	r18, 0x24	; 36
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	f9 01       	movw	r30, r18
 8c8:	20 81       	ld	r18, Z
 8ca:	28 60       	ori	r18, 0x08	; 8
 8cc:	fc 01       	movw	r30, r24
 8ce:	20 83       	st	Z, r18
	SPI_MISO_DDR_REG &= ~(1 << SPI_MISO_BIT);	//MISO-Pin wird auf Eingang deklariert
 8d0:	84 e2       	ldi	r24, 0x24	; 36
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	24 e2       	ldi	r18, 0x24	; 36
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	2f 7e       	andi	r18, 0xEF	; 239
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
	SPI_CLK_DDR_REG |= 1 << SPI_CLK_BIT;		//CLK-Pin wird auf Ausgang deklariert
 8e2:	84 e2       	ldi	r24, 0x24	; 36
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	24 e2       	ldi	r18, 0x24	; 36
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	f9 01       	movw	r30, r18
 8ec:	20 81       	ld	r18, Z
 8ee:	20 62       	ori	r18, 0x20	; 32
 8f0:	fc 01       	movw	r30, r24
 8f2:	20 83       	st	Z, r18
	
	SPI_CONTROL_REGISTER = SPI_MASTER | SPI_ENABLE | ucspi_interrupt | ucspi_data_order | (ucspi_mode << 2) | (ucspi_sck_freq % 4);
 8f4:	8c e4       	ldi	r24, 0x4C	; 76
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	39 81       	ldd	r19, Y+1	; 0x01
 8fa:	2a 81       	ldd	r18, Y+2	; 0x02
 8fc:	43 2f       	mov	r20, r19
 8fe:	42 2b       	or	r20, r18
 900:	2b 81       	ldd	r18, Y+3	; 0x03
 902:	22 2f       	mov	r18, r18
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	22 0f       	add	r18, r18
 908:	33 1f       	adc	r19, r19
 90a:	22 0f       	add	r18, r18
 90c:	33 1f       	adc	r19, r19
 90e:	34 2f       	mov	r19, r20
 910:	32 2b       	or	r19, r18
 912:	2c 81       	ldd	r18, Y+4	; 0x04
 914:	23 70       	andi	r18, 0x03	; 3
 916:	23 2b       	or	r18, r19
 918:	20 65       	ori	r18, 0x50	; 80
 91a:	fc 01       	movw	r30, r24
 91c:	20 83       	st	Z, r18
		//µC wird als Master deklariert, die SPI-Schnittstelle wird freigegeben
		//falls gewünscht, es wird das SPI-Interrupt freigegeben und die Bitreihenfolge wird bestimmt
		//der Übertragungsmodus wird bestimmt

	SPI_STATUS_REGISTER = ucspi_sck_freq / 4;
 91e:	8d e4       	ldi	r24, 0x4D	; 77
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	2c 81       	ldd	r18, Y+4	; 0x04
 924:	26 95       	lsr	r18
 926:	26 95       	lsr	r18
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
		//die gewünschte SPI-Taktfrequenz wird gewählt
}
 92c:	00 00       	nop
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <SPI_Master_SlaveSelectInit>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_SlaveSelectInit(tspiHandle tspi_pins)
{
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	00 d0       	rcall	.+0      	; 0x942 <SPI_Master_SlaveSelectInit+0x6>
 942:	00 d0       	rcall	.+0      	; 0x944 <SPI_Master_SlaveSelectInit+0x8>
 944:	00 d0       	rcall	.+0      	; 0x946 <SPI_Master_SlaveSelectInit+0xa>
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	49 83       	std	Y+1, r20	; 0x01
 94c:	5a 83       	std	Y+2, r21	; 0x02
 94e:	6b 83       	std	Y+3, r22	; 0x03
 950:	7c 83       	std	Y+4, r23	; 0x04
 952:	8d 83       	std	Y+5, r24	; 0x05
 954:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_DDR |= 1 << tspi_pins.CS_pin;
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	9a 81       	ldd	r25, Y+2	; 0x02
 95a:	29 81       	ldd	r18, Y+1	; 0x01
 95c:	3a 81       	ldd	r19, Y+2	; 0x02
 95e:	f9 01       	movw	r30, r18
 960:	20 81       	ld	r18, Z
 962:	62 2f       	mov	r22, r18
 964:	2d 81       	ldd	r18, Y+5	; 0x05
 966:	42 2f       	mov	r20, r18
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	21 e0       	ldi	r18, 0x01	; 1
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <SPI_Master_SlaveSelectInit+0x38>
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	4a 95       	dec	r20
 976:	e2 f7       	brpl	.-8      	; 0x970 <SPI_Master_SlaveSelectInit+0x34>
 978:	26 2b       	or	r18, r22
 97a:	fc 01       	movw	r30, r24
 97c:	20 83       	st	Z, r18
	*tspi_pins.CS_PORT |= 1 << tspi_pins.CS_pin;
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	9c 81       	ldd	r25, Y+4	; 0x04
 982:	2b 81       	ldd	r18, Y+3	; 0x03
 984:	3c 81       	ldd	r19, Y+4	; 0x04
 986:	f9 01       	movw	r30, r18
 988:	20 81       	ld	r18, Z
 98a:	62 2f       	mov	r22, r18
 98c:	2d 81       	ldd	r18, Y+5	; 0x05
 98e:	42 2f       	mov	r20, r18
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <SPI_Master_SlaveSelectInit+0x60>
 998:	22 0f       	add	r18, r18
 99a:	33 1f       	adc	r19, r19
 99c:	4a 95       	dec	r20
 99e:	e2 f7       	brpl	.-8      	; 0x998 <SPI_Master_SlaveSelectInit+0x5c>
 9a0:	26 2b       	or	r18, r22
 9a2:	fc 01       	movw	r30, r24
 9a4:	20 83       	st	Z, r18
}
 9a6:	00 00       	nop
 9a8:	26 96       	adiw	r28, 0x06	; 6
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	f8 94       	cli
 9ae:	de bf       	out	0x3e, r29	; 62
 9b0:	0f be       	out	0x3f, r0	; 63
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	08 95       	ret

000009ba <SPI_Master_Start>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Start(tspiHandle tspi_pins)
{
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	00 d0       	rcall	.+0      	; 0x9c0 <SPI_Master_Start+0x6>
 9c0:	00 d0       	rcall	.+0      	; 0x9c2 <SPI_Master_Start+0x8>
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <SPI_Master_Start+0xa>
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
 9c8:	49 83       	std	Y+1, r20	; 0x01
 9ca:	5a 83       	std	Y+2, r21	; 0x02
 9cc:	6b 83       	std	Y+3, r22	; 0x03
 9ce:	7c 83       	std	Y+4, r23	; 0x04
 9d0:	8d 83       	std	Y+5, r24	; 0x05
 9d2:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_PORT &= ~(1 << tspi_pins.CS_pin);
 9d4:	8b 81       	ldd	r24, Y+3	; 0x03
 9d6:	9c 81       	ldd	r25, Y+4	; 0x04
 9d8:	2b 81       	ldd	r18, Y+3	; 0x03
 9da:	3c 81       	ldd	r19, Y+4	; 0x04
 9dc:	f9 01       	movw	r30, r18
 9de:	20 81       	ld	r18, Z
 9e0:	62 2f       	mov	r22, r18
 9e2:	2d 81       	ldd	r18, Y+5	; 0x05
 9e4:	42 2f       	mov	r20, r18
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	21 e0       	ldi	r18, 0x01	; 1
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <SPI_Master_Start+0x38>
 9ee:	22 0f       	add	r18, r18
 9f0:	33 1f       	adc	r19, r19
 9f2:	4a 95       	dec	r20
 9f4:	e2 f7       	brpl	.-8      	; 0x9ee <SPI_Master_Start+0x34>
 9f6:	20 95       	com	r18
 9f8:	26 23       	and	r18, r22
 9fa:	fc 01       	movw	r30, r24
 9fc:	20 83       	st	Z, r18
}
 9fe:	00 00       	nop
 a00:	26 96       	adiw	r28, 0x06	; 6
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	de bf       	out	0x3e, r29	; 62
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	cd bf       	out	0x3d, r28	; 61
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <SPI_Master_Stop>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Stop(tspiHandle tspi_pins)
{
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	00 d0       	rcall	.+0      	; 0xa18 <SPI_Master_Stop+0x6>
 a18:	00 d0       	rcall	.+0      	; 0xa1a <SPI_Master_Stop+0x8>
 a1a:	00 d0       	rcall	.+0      	; 0xa1c <SPI_Master_Stop+0xa>
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
 a20:	49 83       	std	Y+1, r20	; 0x01
 a22:	5a 83       	std	Y+2, r21	; 0x02
 a24:	6b 83       	std	Y+3, r22	; 0x03
 a26:	7c 83       	std	Y+4, r23	; 0x04
 a28:	8d 83       	std	Y+5, r24	; 0x05
 a2a:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_PORT |= (1 << tspi_pins.CS_pin);
 a2c:	8b 81       	ldd	r24, Y+3	; 0x03
 a2e:	9c 81       	ldd	r25, Y+4	; 0x04
 a30:	2b 81       	ldd	r18, Y+3	; 0x03
 a32:	3c 81       	ldd	r19, Y+4	; 0x04
 a34:	f9 01       	movw	r30, r18
 a36:	20 81       	ld	r18, Z
 a38:	62 2f       	mov	r22, r18
 a3a:	2d 81       	ldd	r18, Y+5	; 0x05
 a3c:	42 2f       	mov	r20, r18
 a3e:	50 e0       	ldi	r21, 0x00	; 0
 a40:	21 e0       	ldi	r18, 0x01	; 1
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <SPI_Master_Stop+0x38>
 a46:	22 0f       	add	r18, r18
 a48:	33 1f       	adc	r19, r19
 a4a:	4a 95       	dec	r20
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <SPI_Master_Stop+0x34>
 a4e:	26 2b       	or	r18, r22
 a50:	fc 01       	movw	r30, r24
 a52:	20 83       	st	Z, r18
}
 a54:	00 00       	nop
 a56:	26 96       	adiw	r28, 0x06	; 6
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	df 91       	pop	r29
 a64:	cf 91       	pop	r28
 a66:	08 95       	ret

00000a68 <SPI_Master_Write>:
//Rückgabeparameter:		das empfangene Byte
//Revision:
//Status: freigegeben
//****************************************************************************************
uint8_t SPI_Master_Write(uint8_t ucdata)
{
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	1f 92       	push	r1
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62
 a72:	89 83       	std	Y+1, r24	; 0x01
	SPI_DATA_REGISTER = ucdata;
 a74:	8e e4       	ldi	r24, 0x4E	; 78
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	29 81       	ldd	r18, Y+1	; 0x01
 a7a:	fc 01       	movw	r30, r24
 a7c:	20 83       	st	Z, r18
	while(SPI_RUNNING);
 a7e:	00 00       	nop
 a80:	8d e4       	ldi	r24, 0x4D	; 77
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	fc 01       	movw	r30, r24
 a86:	80 81       	ld	r24, Z
 a88:	88 23       	and	r24, r24
 a8a:	d4 f7       	brge	.-12     	; 0xa80 <SPI_Master_Write+0x18>
	return SPI_DATA_REGISTER;
 a8c:	8e e4       	ldi	r24, 0x4E	; 78
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	fc 01       	movw	r30, r24
 a92:	80 81       	ld	r24, Z
 a94:	0f 90       	pop	r0
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

00000a9c <Timer1_Init>:
		ucFlag_1s = 0;
		return TIMER_TRIGGERED;
	}
	return TIMER_RUNNING;
	
}
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	80 e8       	ldi	r24, 0x80	; 128
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	20 e8       	ldi	r18, 0x80	; 128
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	f9 01       	movw	r30, r18
 aae:	20 81       	ld	r18, Z
 ab0:	22 60       	ori	r18, 0x02	; 2
 ab2:	fc 01       	movw	r30, r24
 ab4:	20 83       	st	Z, r18
 ab6:	81 e8       	ldi	r24, 0x81	; 129
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	21 e8       	ldi	r18, 0x81	; 129
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	f9 01       	movw	r30, r18
 ac0:	20 81       	ld	r18, Z
 ac2:	25 60       	ori	r18, 0x05	; 5
 ac4:	fc 01       	movw	r30, r24
 ac6:	20 83       	st	Z, r18
 ac8:	87 e4       	ldi	r24, 0x47	; 71
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	23 eb       	ldi	r18, 0xB3	; 179
 ace:	fc 01       	movw	r30, r24
 ad0:	20 83       	st	Z, r18
 ad2:	8f e6       	ldi	r24, 0x6F	; 111
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	2f e6       	ldi	r18, 0x6F	; 111
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	f9 01       	movw	r30, r18
 adc:	20 81       	ld	r18, Z
 ade:	22 60       	ori	r18, 0x02	; 2
 ae0:	fc 01       	movw	r30, r24
 ae2:	20 83       	st	Z, r18
 ae4:	78 94       	sei
 ae6:	00 00       	nop
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <__vector_11>:
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 af6:	0f 92       	push	r0
 af8:	11 24       	eor	r1, r1
 afa:	8f 93       	push	r24
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 b0a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ucCNt_1s>
 b0e:	8f 5f       	subi	r24, 0xFF	; 255
 b10:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ucCNt_1s>
 b14:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ucCNt_100ms>
 b18:	8f 5f       	subi	r24, 0xFF	; 255
 b1a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ucCNt_100ms>
 b1e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ucCNt_1s>
 b22:	84 36       	cpi	r24, 0x64	; 100
 b24:	29 f4       	brne	.+10     	; 0xb30 <__vector_11+0x42>
 b26:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <ucCNt_1s>
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ucFlag_1s>
 b30:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ucCNt_100ms>
 b34:	8a 30       	cpi	r24, 0x0A	; 10
 b36:	29 f4       	brne	.+10     	; 0xb42 <__vector_11+0x54>
 b38:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ucCNt_100ms>
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ucFlag_100ms>
 b42:	00 00       	nop
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	8f 91       	pop	r24
 b4a:	0f 90       	pop	r0
 b4c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 b50:	0f 90       	pop	r0
 b52:	1f 90       	pop	r1
 b54:	18 95       	reti

00000b56 <Timer1_get_100msState>:

unsigned char Timer1_get_100msState(void){
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
	//Version:			1
	//Datum:			220531
	//Autor:			mh
	//Status:			ok
	//-------------------------------------------------------------------
	if(ucFlag_100ms == 1){
 b5e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ucFlag_100ms>
 b62:	81 30       	cpi	r24, 0x01	; 1
 b64:	21 f4       	brne	.+8      	; 0xb6e <Timer1_get_100msState+0x18>
		ucFlag_100ms = 0;
 b66:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ucFlag_100ms>
		return TIMER_TRIGGERED;
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	01 c0       	rjmp	.+2      	; 0xb70 <Timer1_get_100msState+0x1a>
	}
	return TIMER_RUNNING;
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	08 95       	ret

00000b76 <InitTimer2CTC>:
	}
	else return IDLE;
}

void InitTimer2CTC(void)
{
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
 b7a:	cd b7       	in	r28, 0x3d	; 61
 b7c:	de b7       	in	r29, 0x3e	; 62
	TCCR2A = (1 << WGM21);
 b7e:	80 eb       	ldi	r24, 0xB0	; 176
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	22 e0       	ldi	r18, 0x02	; 2
 b84:	fc 01       	movw	r30, r24
 b86:	20 83       	st	Z, r18
	TCCR2B = (1<<CS21) | (1<<CS22) | (1<<CS20);
 b88:	81 eb       	ldi	r24, 0xB1	; 177
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	27 e0       	ldi	r18, 0x07	; 7
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	OCR2A = 179;
 b92:	83 eb       	ldi	r24, 0xB3	; 179
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	23 eb       	ldi	r18, 0xB3	; 179
 b98:	fc 01       	movw	r30, r24
 b9a:	20 83       	st	Z, r18
	TIMSK2 |= (1 << OCIE2A);
 b9c:	80 e7       	ldi	r24, 0x70	; 112
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	20 e7       	ldi	r18, 0x70	; 112
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	f9 01       	movw	r30, r18
 ba6:	20 81       	ld	r18, Z
 ba8:	22 60       	ori	r18, 0x02	; 2
 baa:	fc 01       	movw	r30, r24
 bac:	20 83       	st	Z, r18
}
 bae:	00 00       	nop
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	08 95       	ret

00000bb6 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 bb6:	1f 92       	push	r1
 bb8:	0f 92       	push	r0
 bba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 bbe:	0f 92       	push	r0
 bc0:	11 24       	eor	r1, r1
 bc2:	8f 93       	push	r24
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
	uc10MsFlag=1;
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <uc10MsFlag>
	uc10MsCnt++;
 bd2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <uc10MsCnt>
 bd6:	8f 5f       	subi	r24, 0xFF	; 255
 bd8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <uc10MsCnt>

	if (uc10MsCnt==10)
 bdc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <uc10MsCnt>
 be0:	8a 30       	cpi	r24, 0x0A	; 10
 be2:	99 f4       	brne	.+38     	; 0xc0a <__vector_7+0x54>
	{
		uc100MsFlag=1;
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <uc100MsFlag>
		uc100MsCnt++;
 bea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <uc100MsCnt>
 bee:	8f 5f       	subi	r24, 0xFF	; 255
 bf0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <uc100MsCnt>
		uc10MsCnt=0;
 bf4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <uc10MsCnt>
		if (uc100MsCnt==10)
 bf8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <uc100MsCnt>
 bfc:	8a 30       	cpi	r24, 0x0A	; 10
 bfe:	29 f4       	brne	.+10     	; 0xc0a <__vector_7+0x54>
		{
			uc1sFlag=1;
 c00:	81 e0       	ldi	r24, 0x01	; 1
 c02:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uc1sFlag>
			uc100MsCnt=0;
 c06:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <uc100MsCnt>
		}
	}
 c0a:	00 00       	nop
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	8f 91       	pop	r24
 c12:	0f 90       	pop	r0
 c14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 c18:	0f 90       	pop	r0
 c1a:	1f 90       	pop	r1
 c1c:	18 95       	reti

00000c1e <__vector_24>:
//Beschreibung:
//Aufgerufene Funktionen:
//Status:
//----------------------------------------------------------------------------------------
ISR(TWI_vect)
{
 c1e:	1f 92       	push	r1
 c20:	0f 92       	push	r0
 c22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 c26:	0f 92       	push	r0
 c28:	11 24       	eor	r1, r1
 c2a:	2f 93       	push	r18
 c2c:	3f 93       	push	r19
 c2e:	8f 93       	push	r24
 c30:	9f 93       	push	r25
 c32:	ef 93       	push	r30
 c34:	ff 93       	push	r31
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	cd b7       	in	r28, 0x3d	; 61
 c3c:	de b7       	in	r29, 0x3e	; 62
	ucTWI_INT_Flag = 1;
 c3e:	81 e0       	ldi	r24, 0x01	; 1
 c40:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ucTWI_INT_Flag>
	ucTWSR_Register = TWI_STATUS_REGISTER;
 c44:	89 eb       	ldi	r24, 0xB9	; 185
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	fc 01       	movw	r30, r24
 c4a:	80 81       	ld	r24, Z
 c4c:	88 7f       	andi	r24, 0xF8	; 248
 c4e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ucTWSR_Register>
	
	TWCR |= 1 << TWINT;
 c52:	8c eb       	ldi	r24, 0xBC	; 188
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	2c eb       	ldi	r18, 0xBC	; 188
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	f9 01       	movw	r30, r18
 c5c:	20 81       	ld	r18, Z
 c5e:	20 68       	ori	r18, 0x80	; 128
 c60:	fc 01       	movw	r30, r24
 c62:	20 83       	st	Z, r18
 c64:	00 00       	nop
 c66:	df 91       	pop	r29
 c68:	cf 91       	pop	r28
 c6a:	ff 91       	pop	r31
 c6c:	ef 91       	pop	r30
 c6e:	9f 91       	pop	r25
 c70:	8f 91       	pop	r24
 c72:	3f 91       	pop	r19
 c74:	2f 91       	pop	r18
 c76:	0f 90       	pop	r0
 c78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
 c7c:	0f 90       	pop	r0
 c7e:	1f 90       	pop	r1
 c80:	18 95       	reti

00000c82 <WS2812_Init>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void WS2812_Init(void)
{
 c82:	cf 93       	push	r28
 c84:	df 93       	push	r29
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
	*WS2812_1.WS2812_DDRReg |= 1 << WS2812_1.WS2812_Pin; //der anzusteuernde Pin wird auf Ausgang gesetzt
 c8a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <WS2812_1>
 c8e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WS2812_1+0x1>
 c92:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <WS2812_1>
 c96:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <WS2812_1+0x1>
 c9a:	f9 01       	movw	r30, r18
 c9c:	20 81       	ld	r18, Z
 c9e:	62 2f       	mov	r22, r18
 ca0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <WS2812_1+0x4>
 ca4:	42 2f       	mov	r20, r18
 ca6:	50 e0       	ldi	r21, 0x00	; 0
 ca8:	21 e0       	ldi	r18, 0x01	; 1
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <WS2812_Init+0x30>
 cae:	22 0f       	add	r18, r18
 cb0:	33 1f       	adc	r19, r19
 cb2:	4a 95       	dec	r20
 cb4:	e2 f7       	brpl	.-8      	; 0xcae <WS2812_Init+0x2c>
 cb6:	26 2b       	or	r18, r22
 cb8:	fc 01       	movw	r30, r24
 cba:	20 83       	st	Z, r18
}
 cbc:	00 00       	nop
 cbe:	df 91       	pop	r29
 cc0:	cf 91       	pop	r28
 cc2:	08 95       	ret

00000cc4 <_exit>:
 cc4:	f8 94       	cli

00000cc6 <__stop_program>:
 cc6:	ff cf       	rjmp	.-2      	; 0xcc6 <__stop_program>
