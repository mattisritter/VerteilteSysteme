
Heizkoerperthermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000181e  000018b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000181e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800140  00800140  000018f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022e6  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  00004012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c70  00000000  00000000  00004e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c88  00000000  00000000  00006b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fda  00000000  00000000  00007794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000182d  00000000  00000000  0000876e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00009f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	d6 c6       	rjmp	.+3500   	; 0xdbc <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	8e c6       	rjmp	.+3356   	; 0xd34 <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	cc c8       	rjmp	.-3688   	; 0xfffff1ca <__eeprom_end+0xff7ef1ca>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	ee e1       	ldi	r30, 0x1E	; 30
      48:	f8 e1       	ldi	r31, 0x18	; 24
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a0 34       	cpi	r26, 0x40	; 64
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	21 e0       	ldi	r18, 0x01	; 1
      58:	a0 e4       	ldi	r26, 0x40	; 64
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a6 35       	cpi	r26, 0x56	; 86
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	bc d2       	rcall	.+1400   	; 0x5e0 <main>
      68:	d8 cb       	rjmp	.-2128   	; 0xfffff81a <__eeprom_end+0xff7ef81a>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Display_HardwareInit>:
	Display_RS_Low();		//RS-Leitung auf low, Befehls-Register vom Display wird angewählt

	Display_Transfer4BitData(Options);	//Funktionscode wird übertragen
	Display_RS_High();		//RS-Leitung geht auf high
	Display_delay(DISPLAY_CURSOR_OR_DISPLAY_SHIFT_DELAY);	//warten auf das Ausführen des Befehls
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	d4 d0       	rcall	.+424    	; 0x21e <Display_DATA_Output>
      76:	6d d0       	rcall	.+218    	; 0x152 <Display_RS_Output>
      78:	9f d0       	rcall	.+318    	; 0x1b8 <Display_EN_Output>
      7a:	00 00       	nop
      7c:	df 91       	pop	r29
      7e:	cf 91       	pop	r28
      80:	08 95       	ret

00000082 <Display_delay>:
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	2c 97       	sbiw	r28, 0x0c	; 12
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61
      96:	69 87       	std	Y+9, r22	; 0x09
      98:	7a 87       	std	Y+10, r23	; 0x0a
      9a:	8b 87       	std	Y+11, r24	; 0x0b
      9c:	9c 87       	std	Y+12, r25	; 0x0c
      9e:	89 85       	ldd	r24, Y+9	; 0x09
      a0:	9a 85       	ldd	r25, Y+10	; 0x0a
      a2:	ab 85       	ldd	r26, Y+11	; 0x0b
      a4:	bc 85       	ldd	r27, Y+12	; 0x0c
      a6:	8d 83       	std	Y+5, r24	; 0x05
      a8:	9e 83       	std	Y+6, r25	; 0x06
      aa:	af 83       	std	Y+7, r26	; 0x07
      ac:	b8 87       	std	Y+8, r27	; 0x08
      ae:	19 82       	std	Y+1, r1	; 0x01
      b0:	1a 82       	std	Y+2, r1	; 0x02
      b2:	1b 82       	std	Y+3, r1	; 0x03
      b4:	1c 82       	std	Y+4, r1	; 0x04
      b6:	0b c0       	rjmp	.+22     	; 0xce <Display_delay+0x4c>
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	9a 81       	ldd	r25, Y+2	; 0x02
      bc:	ab 81       	ldd	r26, Y+3	; 0x03
      be:	bc 81       	ldd	r27, Y+4	; 0x04
      c0:	01 96       	adiw	r24, 0x01	; 1
      c2:	a1 1d       	adc	r26, r1
      c4:	b1 1d       	adc	r27, r1
      c6:	89 83       	std	Y+1, r24	; 0x01
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	ab 83       	std	Y+3, r26	; 0x03
      cc:	bc 83       	std	Y+4, r27	; 0x04
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	3a 81       	ldd	r19, Y+2	; 0x02
      d2:	4b 81       	ldd	r20, Y+3	; 0x03
      d4:	5c 81       	ldd	r21, Y+4	; 0x04
      d6:	8d 81       	ldd	r24, Y+5	; 0x05
      d8:	9e 81       	ldd	r25, Y+6	; 0x06
      da:	af 81       	ldd	r26, Y+7	; 0x07
      dc:	b8 85       	ldd	r27, Y+8	; 0x08
      de:	28 17       	cp	r18, r24
      e0:	39 07       	cpc	r19, r25
      e2:	4a 07       	cpc	r20, r26
      e4:	5b 07       	cpc	r21, r27
      e6:	40 f3       	brcs	.-48     	; 0xb8 <Display_delay+0x36>
      e8:	00 00       	nop
      ea:	2c 96       	adiw	r28, 0x0c	; 12
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <Display_Aus>:
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	8a e2       	ldi	r24, 0x2A	; 42
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	2a e2       	ldi	r18, 0x2A	; 42
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	20 81       	ld	r18, Z
     110:	20 68       	ori	r18, 0x80	; 128
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
     116:	8b e2       	ldi	r24, 0x2B	; 43
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	2b e2       	ldi	r18, 0x2B	; 43
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	20 81       	ld	r18, Z
     122:	2f 77       	andi	r18, 0x7F	; 127
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	00 00       	nop
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <Display_An>:
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	8b e2       	ldi	r24, 0x2B	; 43
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	2b e2       	ldi	r18, 0x2B	; 43
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	f9 01       	movw	r30, r18
     142:	20 81       	ld	r18, Z
     144:	20 68       	ori	r18, 0x80	; 128
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
     14a:	00 00       	nop
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <Display_RS_Output>:
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	84 e2       	ldi	r24, 0x24	; 36
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	24 e2       	ldi	r18, 0x24	; 36
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	f9 01       	movw	r30, r18
     164:	20 81       	ld	r18, Z
     166:	21 60       	ori	r18, 0x01	; 1
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
     16c:	00 00       	nop
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <Display_RS_High>:
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	85 e2       	ldi	r24, 0x25	; 37
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	25 e2       	ldi	r18, 0x25	; 37
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	f9 01       	movw	r30, r18
     186:	20 81       	ld	r18, Z
     188:	21 60       	ori	r18, 0x01	; 1
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
     18e:	00 00       	nop
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <Display_RS_Low>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	85 e2       	ldi	r24, 0x25	; 37
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	25 e2       	ldi	r18, 0x25	; 37
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	2e 7f       	andi	r18, 0xFE	; 254
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
     1b0:	00 00       	nop
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <Display_EN_Output>:
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	84 e2       	ldi	r24, 0x24	; 36
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	24 e2       	ldi	r18, 0x24	; 36
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	22 60       	ori	r18, 0x02	; 2
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
     1d2:	00 00       	nop
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <Display_EN_High>:
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	85 e2       	ldi	r24, 0x25	; 37
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	25 e2       	ldi	r18, 0x25	; 37
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	22 60       	ori	r18, 0x02	; 2
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
     1f4:	00 00       	nop
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <Display_EN_Low>:
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	85 e2       	ldi	r24, 0x25	; 37
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	25 e2       	ldi	r18, 0x25	; 37
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	2d 7f       	andi	r18, 0xFD	; 253
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <Display_DATA_Output>:
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	87 e2       	ldi	r24, 0x27	; 39
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	27 e2       	ldi	r18, 0x27	; 39
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	2f 60       	ori	r18, 0x0F	; 15
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
     238:	00 00       	nop
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <Display_DATA_BitHigh>:
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	1f 92       	push	r1
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	88 e2       	ldi	r24, 0x28	; 40
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	28 e2       	ldi	r18, 0x28	; 40
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	62 2f       	mov	r22, r18
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	42 2f       	mov	r20, r18
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <Display_DATA_BitHigh+0x2a>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	4a 95       	dec	r20
     26c:	e2 f7       	brpl	.-8      	; 0x266 <Display_DATA_BitHigh+0x26>
     26e:	26 2b       	or	r18, r22
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
     274:	00 00       	nop
     276:	0f 90       	pop	r0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <Display_DATA_BitLow>:
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	1f 92       	push	r1
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	28 e2       	ldi	r18, 0x28	; 40
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	62 2f       	mov	r22, r18
     298:	29 81       	ldd	r18, Y+1	; 0x01
     29a:	42 2f       	mov	r20, r18
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Display_DATA_BitLow+0x2a>
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	4a 95       	dec	r20
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Display_DATA_BitLow+0x26>
     2ac:	20 95       	com	r18
     2ae:	26 23       	and	r18, r22
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
     2b4:	00 00       	nop
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <Display_Clear>:
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	d2 de       	rcall	.-604    	; 0x6c <Display_HardwareInit>
     2c8:	66 df       	rcall	.-308    	; 0x196 <Display_RS_Low>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	99 d0       	rcall	.+306    	; 0x400 <Display_Transfer4BitData>
     2ce:	52 df       	rcall	.-348    	; 0x174 <Display_RS_High>
     2d0:	60 ea       	ldi	r22, 0xA0	; 160
     2d2:	7f e0       	ldi	r23, 0x0F	; 15
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	d4 de       	rcall	.-600    	; 0x82 <Display_delay>
     2da:	00 00       	nop
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <Display_ModeEntry>:
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	be de       	rcall	.-644    	; 0x6c <Display_HardwareInit>
     2f0:	52 df       	rcall	.-348    	; 0x196 <Display_RS_Low>
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	85 d0       	rcall	.+266    	; 0x400 <Display_Transfer4BitData>
     2f6:	3e df       	rcall	.-388    	; 0x174 <Display_RS_High>
     2f8:	62 e3       	ldi	r22, 0x32	; 50
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	c0 de       	rcall	.-640    	; 0x82 <Display_delay>
     302:	00 00       	nop
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <Display_Control>:
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	a9 de       	rcall	.-686    	; 0x6c <Display_HardwareInit>
     31a:	3d df       	rcall	.-390    	; 0x196 <Display_RS_Low>
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	70 d0       	rcall	.+224    	; 0x400 <Display_Transfer4BitData>
     320:	29 df       	rcall	.-430    	; 0x174 <Display_RS_High>
     322:	62 e3       	ldi	r22, 0x32	; 50
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	ab de       	rcall	.-682    	; 0x82 <Display_delay>
     32c:	00 00       	nop
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <Display_SetMPUInterface>:
//							Display_delay
//Übergebene Parameter	: Options
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_SetMPUInterface(unsigned char Options)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <Display_SetMPUInterface+0x6>
     33c:	1f 92       	push	r1
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char dummy = 0x80, i;	//dummy dient zur Maskierung der einzelnen Bits
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	89 83       	std	Y+1, r24	; 0x01

	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
     348:	91 de       	rcall	.-734    	; 0x6c <Display_HardwareInit>
	Display_RS_Low();		//RS-Leitung auf low, Befehls-Register vom Display wird angewählt
     34a:	25 df       	rcall	.-438    	; 0x196 <Display_RS_Low>
	Display_EN_High();		//EN-Leitung (Read/Write Freigabe) wird auf high gesetzt
     34c:	46 df       	rcall	.-372    	; 0x1da <Display_EN_High>
							//die einzelne Datenbits werden beschrieben
	for(i = 0; i < 4; i++)	//die ersten 4 Datenbits werden beschrieben
     34e:	1a 82       	std	Y+2, r1	; 0x02
     350:	1c c0       	rjmp	.+56     	; 0x38a <Display_SetMPUInterface+0x54>
	{
		if(Options & dummy)
     352:	9b 81       	ldd	r25, Y+3	; 0x03
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	89 23       	and	r24, r25
     358:	88 23       	and	r24, r24
     35a:	49 f0       	breq	.+18     	; 0x36e <Display_SetMPUInterface+0x38>
		{
			Display_DATA_BitHigh(ucDataBit[i]);	//wenn das Bit im Options entsprechend dem dummy-Bit
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	88 2f       	mov	r24, r24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	80 50       	subi	r24, 0x00	; 0
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	6a df       	rcall	.-300    	; 0x240 <Display_DATA_BitHigh>
     36c:	08 c0       	rjmp	.+16     	; 0x37e <Display_SetMPUInterface+0x48>
		}					//1 ist, so wird das entsprechende Datenbit auf high gesetzt
		else
		{
			Display_DATA_BitLow(ucDataBit[i]);
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	88 2f       	mov	r24, r24
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	80 50       	subi	r24, 0x00	; 0
     376:	9f 4f       	sbci	r25, 0xFF	; 255
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	80 df       	rcall	.-256    	; 0x27e <Display_DATA_BitLow>
		}

		dummy = dummy >> 1;
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	86 95       	lsr	r24
     382:	89 83       	std	Y+1, r24	; 0x01

	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
	Display_RS_Low();		//RS-Leitung auf low, Befehls-Register vom Display wird angewählt
	Display_EN_High();		//EN-Leitung (Read/Write Freigabe) wird auf high gesetzt
							//die einzelne Datenbits werden beschrieben
	for(i = 0; i < 4; i++)	//die ersten 4 Datenbits werden beschrieben
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	84 30       	cpi	r24, 0x04	; 4
     38e:	08 f3       	brcs	.-62     	; 0x352 <Display_SetMPUInterface+0x1c>
		}

		dummy = dummy >> 1;
	}			

	Display_EN_Low();	//der Zustand auf den 4 Datenbit-Leitungen wird gespeichert
     390:	35 df       	rcall	.-406    	; 0x1fc <Display_EN_Low>
	Display_EN_High();	//EN-Leitung (Read/Write Freigabe) wird wieder auf high gesetzt	
     392:	23 df       	rcall	.-442    	; 0x1da <Display_EN_High>

	Display_Transfer4BitData(Options);	//Funktionscode wird übertragen
     394:	8b 81       	ldd	r24, Y+3	; 0x03
     396:	34 d0       	rcall	.+104    	; 0x400 <Display_Transfer4BitData>
	Display_RS_High();		//RS-Leitung geht auf high
     398:	ed de       	rcall	.-550    	; 0x174 <Display_RS_High>
	Display_delay(DISPLAY_SET_MPU_INTERFACE_DELAY);	//warten auf das Ausführen des Befehls
     39a:	62 e3       	ldi	r22, 0x32	; 50
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	6f de       	rcall	.-802    	; 0x82 <Display_delay>
}
     3a4:	00 00       	nop
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <Display_SetCursor>:
//							Display_delay
//Übergebene Parameter	: row ist die Zeile (0 bis 3), column die Spalte (0 bis 15)
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_SetCursor(unsigned char row, unsigned char column)
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <Display_SetCursor+0x6>
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	8a 83       	std	Y+2, r24	; 0x02
     3c0:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char adresse = DISPLAY_FUNKTION_SET_DDRAM_ADRESSE;	
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	89 83       	std	Y+1, r24	; 0x01
	//adresse wird mit dem Instruction Code des Befehls initialisiert
	adresse += ucRAM_OffsetAdresse[row] + column;
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	88 2f       	mov	r24, r24
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	88 5f       	subi	r24, 0xF8	; 248
     3ce:	9e 4f       	sbci	r25, 0xFE	; 254
     3d0:	fc 01       	movw	r30, r24
     3d2:	90 81       	ld	r25, Z
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	89 0f       	add	r24, r25
     3d8:	99 81       	ldd	r25, Y+1	; 0x01
     3da:	89 0f       	add	r24, r25
     3dc:	89 83       	std	Y+1, r24	; 0x01

	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
     3de:	46 de       	rcall	.-884    	; 0x6c <Display_HardwareInit>
	Display_RS_Low();		//RS-Leitung auf low, Befehls-Register vom Display wird angewählt
     3e0:	da de       	rcall	.-588    	; 0x196 <Display_RS_Low>

	Display_Transfer4BitData(adresse);	//Funktionscode wird übertragen
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	0d d0       	rcall	.+26     	; 0x400 <Display_Transfer4BitData>
	Display_RS_High();		//RS-Leitung geht auf high
     3e6:	c6 de       	rcall	.-628    	; 0x174 <Display_RS_High>
	Display_delay(DISPLAY_SET_RAM_ADRESSE_DELAY);	//warten auf das Ausführen des Befehls
     3e8:	62 e3       	ldi	r22, 0x32	; 50
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	48 de       	rcall	.-880    	; 0x82 <Display_delay>
}
     3f2:	00 00       	nop
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <Display_Transfer4BitData>:
//							Display_EN_Low
//Übergebene Parameter	: _8BitData
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_Transfer4BitData(unsigned char _8BitData)
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	00 d0       	rcall	.+0      	; 0x406 <Display_Transfer4BitData+0x6>
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char dummy = 0x80, i;
     40e:	80 e8       	ldi	r24, 0x80	; 128
     410:	89 83       	std	Y+1, r24	; 0x01

	Display_EN_High();	////EN-Leitung (Read/Write Freigabe) wird auf high gesetzt
     412:	e3 de       	rcall	.-570    	; 0x1da <Display_EN_High>

	for(i = 0; i < 8; i++)	//die ersten 4 Datenbits werden beschrieben
     414:	1a 82       	std	Y+2, r1	; 0x02
     416:	21 c0       	rjmp	.+66     	; 0x45a <Display_Transfer4BitData+0x5a>
	{
		if(_8BitData & dummy)
     418:	9b 81       	ldd	r25, Y+3	; 0x03
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	89 23       	and	r24, r25
     41e:	88 23       	and	r24, r24
     420:	49 f0       	breq	.+18     	; 0x434 <Display_Transfer4BitData+0x34>
		{
			Display_DATA_BitHigh(ucDataBit[i]);	//wenn das im Options entsprechend dem dummy Bit
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	80 50       	subi	r24, 0x00	; 0
     42a:	9f 4f       	sbci	r25, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	07 df       	rcall	.-498    	; 0x240 <Display_DATA_BitHigh>
     432:	08 c0       	rjmp	.+16     	; 0x444 <Display_Transfer4BitData+0x44>
		}					//1 ist, so wird das entsprechende Datenbit auf high gesetzt
		else				//ansonsten wird es auf low gesetzt
		{
			Display_DATA_BitLow(ucDataBit[i]);
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 50       	subi	r24, 0x00	; 0
     43c:	9f 4f       	sbci	r25, 0xFF	; 255
     43e:	fc 01       	movw	r30, r24
     440:	80 81       	ld	r24, Z
     442:	1d df       	rcall	.-454    	; 0x27e <Display_DATA_BitLow>
		}

		dummy = dummy >> 1;
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	86 95       	lsr	r24
     448:	89 83       	std	Y+1, r24	; 0x01
		if(i == 3)		//wenn die ersten 4 Bits beschrieben sind,
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	83 30       	cpi	r24, 0x03	; 3
     44e:	11 f4       	brne	.+4      	; 0x454 <Display_Transfer4BitData+0x54>
		{
			Display_EN_Low();	//so werden sie vom Displaycontroller gespeichert
     450:	d5 de       	rcall	.-598    	; 0x1fc <Display_EN_Low>
			Display_EN_High();	//EN-Leitung (Read/Write Freigabe) wird wieder auf high gesetzt			
     452:	c3 de       	rcall	.-634    	; 0x1da <Display_EN_High>
{
	unsigned char dummy = 0x80, i;

	Display_EN_High();	////EN-Leitung (Read/Write Freigabe) wird auf high gesetzt

	for(i = 0; i < 8; i++)	//die ersten 4 Datenbits werden beschrieben
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	8a 83       	std	Y+2, r24	; 0x02
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	e0 f2       	brcs	.-72     	; 0x418 <Display_Transfer4BitData+0x18>
			Display_EN_Low();	//so werden sie vom Displaycontroller gespeichert
			Display_EN_High();	//EN-Leitung (Read/Write Freigabe) wird wieder auf high gesetzt			
		}
	}

	Display_EN_Low();	//das low-nibble des Byte wird gespeichert
     460:	cd de       	rcall	.-614    	; 0x1fc <Display_EN_Low>
}
     462:	00 00       	nop
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <Display_Init>:
//							Display_ModeEntry
//							Display_Control
//Übergebene Parameter	: keine
//----------------------------------------------------------------------------------------------
void Display_Init(void)
{		
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62

	Display_Aus();										//Display-Modul wird ausgeschaltet
     478:	41 de       	rcall	.-894    	; 0xfc <Display_Aus>
	Display_delay(50000);										//0,05 s Wartezeit für Display-Reset
     47a:	60 e5       	ldi	r22, 0x50	; 80
     47c:	73 ec       	ldi	r23, 0xC3	; 195
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	ff dd       	rcall	.-1026   	; 0x82 <Display_delay>
	Display_An();										//Display-Modul wird eingeschaltet
     484:	55 de       	rcall	.-854    	; 0x130 <Display_An>

	//Initialisierung beginnt													
	Display_delay(30000);										//Verzögerung > 30 ms
     486:	60 e3       	ldi	r22, 0x30	; 48
     488:	75 e7       	ldi	r23, 0x75	; 117
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	f9 dd       	rcall	.-1038   	; 0x82 <Display_delay>
	Display_SetMPUInterface(DISPLAY_MPU_4BIT_2_LINES_5x7_DOTS);
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	51 df       	rcall	.-350    	; 0x336 <Display_SetMPUInterface>
	//die Kommunikation findet auf 4 Bit statt, 2zeiliges Display, 5x7 Pixel große Buchstaben
	Display_Clear();	//der gesamte Inhalt des Displays wird gelöscht
     494:	14 df       	rcall	.-472    	; 0x2be <Display_Clear>
	Display_ModeEntry(DISPLAY_MODE_INCR_SHIFT_OFF);	//der Cursor wird um eine stelle inkrementiert,
     496:	86 e0       	ldi	r24, 0x06	; 6
     498:	24 df       	rcall	.-440    	; 0x2e2 <Display_ModeEntry>
													//die Anzeige wird nicht verschoben
	Display_Control(DISPLAY_ON_CURSOR_ON_BLINK_OFF);//Anzeige und Cursor sind eingeblendet,
     49a:	8e e0       	ldi	r24, 0x0E	; 14
     49c:	37 df       	rcall	.-402    	; 0x30c <Display_Control>
													//Cursor blinkt nicht
}
     49e:	00 00       	nop
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <Display_Write>:
//						  	Display_delay
//Übergebene Parameter	: ASCII_of_car - ASCII-Code des Zeichens das angezeigt werden soll
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_Write(unsigned char ASCII_of_char)
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	1f 92       	push	r1
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	89 83       	std	Y+1, r24	; 0x01
	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
     4b2:	dc dd       	rcall	.-1096   	; 0x6c <Display_HardwareInit>
	Display_RS_High();	//RS-Leitung auf high, Data-Register vom Display wird angewählt		
     4b4:	5f de       	rcall	.-834    	; 0x174 <Display_RS_High>

	Display_Transfer4BitData(ASCII_of_char);	//ASCII-code wird übertragen
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	a3 df       	rcall	.-186    	; 0x400 <Display_Transfer4BitData>
	Display_RS_Low();	//RS-Leitung wird auf low gesetzt
     4ba:	6d de       	rcall	.-806    	; 0x196 <Display_RS_Low>
	Display_delay(DISPLAY_SET_RAM_ADRESSE_DELAY);	//warten auf das Ausführen des Befehls
     4bc:	62 e3       	ldi	r22, 0x32	; 50
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	de dd       	rcall	.-1092   	; 0x82 <Display_delay>
}
     4c6:	00 00       	nop
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <Display_Print>:
//Übergebene Parameter	: 	text2print - ein Zeiger auf die Adresse vom Textarray
//							length - Zeichenzahl
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void Display_Print(unsigned char* text2print, unsigned char length)
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <Display_Print+0x6>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <Display_Print+0x8>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	9b 83       	std	Y+3, r25	; 0x03
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i = 0;
     4e2:	19 82       	std	Y+1, r1	; 0x01

	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
     4e4:	c3 dd       	rcall	.-1146   	; 0x6c <Display_HardwareInit>
	Display_RS_High();	//RS-Leitung auf high, Data-Register vom Display wird angewählt
     4e6:	46 de       	rcall	.-884    	; 0x174 <Display_RS_High>
	for(i = 0; i < length; i++)
     4e8:	19 82       	std	Y+1, r1	; 0x01
     4ea:	0d c0       	rjmp	.+26     	; 0x506 <__stack+0x7>
	{
		Display_Write(text2print[i]);	//das i-te Zeichen wird angezeigt
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	88 2f       	mov	r24, r24
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2a 81       	ldd	r18, Y+2	; 0x02
     4f4:	3b 81       	ldd	r19, Y+3	; 0x03
     4f6:	82 0f       	add	r24, r18
     4f8:	93 1f       	adc	r25, r19
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
     4fe:	d3 df       	rcall	.-90     	; 0x4a6 <Display_Write>
{
	unsigned char i = 0;

	Display_HardwareInit();	//der µC wird für die Ansteuerung vom Display initialisiert
	Display_RS_High();	//RS-Leitung auf high, Data-Register vom Display wird angewählt
	for(i = 0; i < length; i++)
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	99 81       	ldd	r25, Y+1	; 0x01
     508:	8c 81       	ldd	r24, Y+4	; 0x04
     50a:	98 17       	cp	r25, r24
     50c:	78 f3       	brcs	.-34     	; 0x4ec <Display_Print+0x1c>
	{
		Display_Write(text2print[i]);	//das i-te Zeichen wird angezeigt
	}
	Display_RS_Low();	//RS-Leitung wird auf low gesetzt
     50e:	43 de       	rcall	.-890    	; 0x196 <Display_RS_Low>
}
     510:	00 00       	nop
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <GerneralInit>:

//Variables

//Definition of funcitons

void GerneralInit(void){
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	27 97       	sbiw	r28, 0x07	; 7
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
	//Date :			27.10.2022
	//Autor:			Moritz
	//Source:			
	//Status:			not testet
	//--------------------------------
	Display_Init();
     534:	9d df       	rcall	.-198    	; 0x470 <Display_Init>
	LED_Init();
     536:	43 d0       	rcall	.+134    	; 0x5be <LED_Init>
	
	WS2812_Init();
     538:	7a d6       	rcall	.+3316   	; 0x122e <WS2812_Init>
	keys_Init();
     53a:	30 d0       	rcall	.+96     	; 0x59c <keys_Init>
	Timer1_Init();
     53c:	d2 d3       	rcall	.+1956   	; 0xce2 <Timer1_Init>
	
	//Calculate TWI register clock=========================================================
	unsigned int F_CPU = 20/*[MHz]*/;			//Clock of uC_Board in Hz
     53e:	84 e1       	ldi	r24, 0x14	; 20
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9a 83       	std	Y+2, r25	; 0x02
     544:	89 83       	std	Y+1, r24	; 0x01
	unsigned int TWI_SCL_FREQ = 400/*[kHz]*/;	//needed TWI frequency for fast speed TWI
     546:	80 e9       	ldi	r24, 0x90	; 144
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int itwi_clock = (((F_CPU*1000 / TWI_SCL_FREQ)- 16) / 2 + 1);
     54e:	29 81       	ldd	r18, Y+1	; 0x01
     550:	3a 81       	ldd	r19, Y+2	; 0x02
     552:	88 ee       	ldi	r24, 0xE8	; 232
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	28 9f       	mul	r18, r24
     558:	a0 01       	movw	r20, r0
     55a:	29 9f       	mul	r18, r25
     55c:	50 0d       	add	r21, r0
     55e:	38 9f       	mul	r19, r24
     560:	50 0d       	add	r21, r0
     562:	11 24       	eor	r1, r1
     564:	2b 81       	ldd	r18, Y+3	; 0x03
     566:	3c 81       	ldd	r19, Y+4	; 0x04
     568:	ca 01       	movw	r24, r20
     56a:	b9 01       	movw	r22, r18
     56c:	2f d9       	rcall	.-3490   	; 0xfffff7cc <__eeprom_end+0xff7ef7cc>
     56e:	cb 01       	movw	r24, r22
     570:	40 97       	sbiw	r24, 0x10	; 16
     572:	96 95       	lsr	r25
     574:	87 95       	ror	r24
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char uctwi_clock = (unsigned char)itwi_clock;
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	8f 83       	std	Y+7, r24	; 0x07
	//=====================================================================================	
	TWI_Master_Init(uctwi_clock);
     580:	8f 81       	ldd	r24, Y+7	; 0x07
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a1 d5       	rcall	.+2882   	; 0x10ca <TWI_Master_Init>

	//CAN_Filter_Init();
	//InitTimer2CTC();
	
}
     588:	00 00       	nop
     58a:	27 96       	adiw	r28, 0x07	; 7
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <keys_Init>:
unsigned char ucS3_old, ucS3_new = 0xFF;
unsigned char ucS4_old, ucS4_new = 0xFF;


//Definition of functions=======================================
void keys_Init(void){
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
	//Version:			1
	//Datum:			220408
	//Autor:			mh
	//Status:			ok
	//--------------------------------
	DDRD &= ~((1<<PD5) | (1<<PD4) | (1<<PD3) /*| (1<<PD2)*/); //Pin 3,2 wird zu eingang
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	2a e2       	ldi	r18, 0x2A	; 42
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	f9 01       	movw	r30, r18
     5ae:	20 81       	ld	r18, Z
     5b0:	27 7c       	andi	r18, 0xC7	; 199
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
}
     5b6:	00 00       	nop
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <LED_Init>:
#include "LED.h"

//Dekalaration der globalen Variablen im Modul LED

//Defintionen der Fnen
void LED_Init(void){
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	//Datum:			220330
	//Autor:			mh
	//Status:			ok
	//--------------------------------------------
	//DDRD |= 1 << PD6;
	DDRB |= 1 << PB2;
     5c6:	84 e2       	ldi	r24, 0x24	; 36
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	24 e2       	ldi	r18, 0x24	; 36
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	24 60       	ori	r18, 0x04	; 4
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
}
     5d8:	00 00       	nop
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <main>:

void Disp_PrintTemperature(int ui2print);

//Main function
int main(void)
{
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	65 97       	sbiw	r28, 0x15	; 21
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
	GerneralInit();
     5f4:	95 df       	rcall	.-214    	; 0x520 <GerneralInit>
	char i = 0;//Zählvariable für farbenverlauf
     5f6:	19 82       	std	Y+1, r1	; 0x01
	
	//Can
	MCP2515_Init(MCP2515_1, BAUDRATE_250_KBPS);
     5f8:	25 e0       	ldi	r18, 0x05	; 5
     5fa:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <MCP2515_1>
     5fe:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <MCP2515_1+0x1>
     602:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MCP2515_1+0x2>
     606:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <MCP2515_1+0x3>
     60a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <MCP2515_1+0x4>
     60e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <MCP2515_1+0x5>
     612:	20 d1       	rcall	.+576    	; 0x854 <MCP2515_Init>
	//MCP2515_Set_Filter_Mask(MCP2515_1, &sFilter);
	
	//Temp read======================================================
	uint8_t tmp75Adress =  0b1001000; //all address pins to gnd/  address according to book: 0x90;
     614:	88 e4       	ldi	r24, 0x48	; 72
     616:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tmp75TempReg = 0b00000000;	//Read temperture register
     618:	1b 82       	std	Y+3, r1	; 0x03
	{
		
		
		//===============================================================
		
		if(Timer1_get_10msState() == TIMER_TRIGGERED)
     61a:	c0 d3       	rcall	.+1920   	; 0xd9c <Timer1_get_10msState>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	e9 f7       	brne	.-6      	; 0x61a <main+0x3a>
		{
			TMP75_Read_Temperature(tmp75Adress, tmp75TempReg);
     620:	6b 81       	ldd	r22, Y+3	; 0x03
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	ff d3       	rcall	.+2046   	; 0xe24 <TMP75_Read_Temperature>
			Disp_PrintTemperature(TMP75_Get_Temperature());//Asks for temp value; prints to display
     626:	8c d4       	rcall	.+2328   	; 0xf40 <TMP75_Get_Temperature>
     628:	5f d0       	rcall	.+190    	; 0x6e8 <Disp_PrintTemperature>
			
			
			
			//Color definition===========================================
			uint8_t uGreen[3] = {7/*green*/,0/*red*/,0/*blue*/};
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	8c 83       	std	Y+4, r24	; 0x04
     62e:	1d 82       	std	Y+5, r1	; 0x05
     630:	1e 82       	std	Y+6, r1	; 0x06
			uint8_t uBrightGreen[3] = {5/*green*/,2/*red*/,0/*blue*/};
     632:	85 e0       	ldi	r24, 0x05	; 5
     634:	8f 83       	std	Y+7, r24	; 0x07
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	88 87       	std	Y+8, r24	; 0x08
     63a:	19 86       	std	Y+9, r1	; 0x09
			uint8_t uYellow[3] = {3/*green*/,4/*red*/,0/*blue*/};
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	8a 87       	std	Y+10, r24	; 0x0a
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	8b 87       	std	Y+11, r24	; 0x0b
     644:	1c 86       	std	Y+12, r1	; 0x0c
			uint8_t uOrange[3] = {2/*green*/,4/*red*/,1/*blue*/};
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	8e 87       	std	Y+14, r24	; 0x0e
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8f 87       	std	Y+15, r24	; 0x0f
			uint8_t uMagenta[3] = {0/*green*/,4/*red*/,3/*blue*/};
     652:	18 8a       	std	Y+16, r1	; 0x10
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	89 8b       	std	Y+17, r24	; 0x11
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	8a 8b       	std	Y+18, r24	; 0x12
			uint8_t uRed[3] = {0/*green*/,7/*red*/,0/*blue*/};
     65c:	1b 8a       	std	Y+19, r1	; 0x13
     65e:	87 e0       	ldi	r24, 0x07	; 7
     660:	8c 8b       	std	Y+20, r24	; 0x14
     662:	1d 8a       	std	Y+21, r1	; 0x15
			//============================================================
			
			if (i == 0)
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	88 23       	and	r24, r24
     668:	41 f4       	brne	.+16     	; 0x67a <main+0x9a>
			{
				WS2812_Set_Colour(uGreen,2);
     66a:	ce 01       	movw	r24, r28
     66c:	04 96       	adiw	r24, 0x04	; 4
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	fe d5       	rcall	.+3068   	; 0x1270 <WS2812_Set_Colour>
				i=1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	d0 cf       	rjmp	.-96     	; 0x61a <main+0x3a>
			}
			else if (i == 1)
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	41 f4       	brne	.+16     	; 0x690 <main+0xb0>
			{
				WS2812_Set_Colour(uBrightGreen,2);
     680:	ce 01       	movw	r24, r28
     682:	07 96       	adiw	r24, 0x07	; 7
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	f3 d5       	rcall	.+3046   	; 0x1270 <WS2812_Set_Colour>
				i=2;
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	c5 cf       	rjmp	.-118    	; 0x61a <main+0x3a>
			}
			else if (i == 2)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	41 f4       	brne	.+16     	; 0x6a6 <main+0xc6>
			{
				WS2812_Set_Colour(uYellow,2);
     696:	ce 01       	movw	r24, r28
     698:	0a 96       	adiw	r24, 0x0a	; 10
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	e8 d5       	rcall	.+3024   	; 0x1270 <WS2812_Set_Colour>
				i=3;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	ba cf       	rjmp	.-140    	; 0x61a <main+0x3a>
			}
			else if (i == 3)
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	41 f4       	brne	.+16     	; 0x6bc <main+0xdc>
			{
				WS2812_Set_Colour(uOrange,2);
     6ac:	ce 01       	movw	r24, r28
     6ae:	0d 96       	adiw	r24, 0x0d	; 13
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	dd d5       	rcall	.+3002   	; 0x1270 <WS2812_Set_Colour>
				i=4;
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	af cf       	rjmp	.-162    	; 0x61a <main+0x3a>
			}
			else if (i == 4)
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	41 f4       	brne	.+16     	; 0x6d2 <main+0xf2>
			{
				WS2812_Set_Colour(uMagenta,2);
     6c2:	ce 01       	movw	r24, r28
     6c4:	40 96       	adiw	r24, 0x10	; 16
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	d2 d5       	rcall	.+2980   	; 0x1270 <WS2812_Set_Colour>
				i=5;
     6cc:	85 e0       	ldi	r24, 0x05	; 5
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	a4 cf       	rjmp	.-184    	; 0x61a <main+0x3a>
			}
			else if (i == 5)
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	85 30       	cpi	r24, 0x05	; 5
     6d6:	09 f0       	breq	.+2      	; 0x6da <main+0xfa>
     6d8:	a0 cf       	rjmp	.-192    	; 0x61a <main+0x3a>
			{
				WS2812_Set_Colour(uRed,2);
     6da:	ce 01       	movw	r24, r28
     6dc:	43 96       	adiw	r24, 0x13	; 19
     6de:	62 e0       	ldi	r22, 0x02	; 2
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	c6 d5       	rcall	.+2956   	; 0x1270 <WS2812_Set_Colour>
				i=0;
     6e4:	19 82       	std	Y+1, r1	; 0x01
					//LED_red_Off();
				//}
				//
			//}
		//}
	}
     6e6:	99 cf       	rjmp	.-206    	; 0x61a <main+0x3a>

000006e8 <Disp_PrintTemperature>:
	
}

void Disp_PrintTemperature(int ui2print){
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	66 97       	sbiw	r28, 0x16	; 22
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	9e 8b       	std	Y+22, r25	; 0x16
     6fe:	8d 8b       	std	Y+21, r24	; 0x15
	//Datum:			3.11.22
	//Autor:			mh
	//Status:			ok
	//--------------------------------
	//Prefill of array-----------------------------
	unsigned char ucDisp[16] = "Isttemp:       C";		
     700:	80 e1       	ldi	r24, 0x10	; 16
     702:	ef e2       	ldi	r30, 0x2F	; 47
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	de 01       	movw	r26, r28
     708:	15 96       	adiw	r26, 0x05	; 5
     70a:	01 90       	ld	r0, Z+
     70c:	0d 92       	st	X+, r0
     70e:	8a 95       	dec	r24
     710:	e1 f7       	brne	.-8      	; 0x70a <Disp_PrintTemperature+0x22>
	//---------------------------------------------
	//Handling negative numbers-------------------------------------
	unsigned char ucNegFlag = 0;	//rememberes if number negative
     712:	19 82       	std	Y+1, r1	; 0x01
	if (ui2print < 0)
     714:	8d 89       	ldd	r24, Y+21	; 0x15
     716:	9e 89       	ldd	r25, Y+22	; 0x16
     718:	99 23       	and	r25, r25
     71a:	4c f4       	brge	.+18     	; 0x72e <Disp_PrintTemperature+0x46>
	{
		ui2print = ui2print *(-1);
     71c:	8d 89       	ldd	r24, Y+21	; 0x15
     71e:	9e 89       	ldd	r25, Y+22	; 0x16
     720:	91 95       	neg	r25
     722:	81 95       	neg	r24
     724:	91 09       	sbc	r25, r1
     726:	9e 8b       	std	Y+22, r25	; 0x16
     728:	8d 8b       	std	Y+21, r24	; 0x15
		ucNegFlag = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	89 83       	std	Y+1, r24	; 0x01
		
	}
	//---------------------------------------------------------------
	//add temp value to array---------------------------------------------------------------------
	for(unsigned char i = 0; i < 6; i++){
     72e:	1a 82       	std	Y+2, r1	; 0x02
     730:	38 c0       	rjmp	.+112    	; 0x7a2 <Disp_PrintTemperature+0xba>
		if (i == 1)
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	a1 f4       	brne	.+40     	; 0x760 <Disp_PrintTemperature+0x78>
		{
			ucDisp[(13-i)] = '.';
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	2d e0       	ldi	r18, 0x0D	; 13
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	48 1b       	sub	r20, r24
     746:	59 0b       	sbc	r21, r25
     748:	ca 01       	movw	r24, r20
     74a:	9e 01       	movw	r18, r28
     74c:	2b 5f       	subi	r18, 0xFB	; 251
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	2e e2       	ldi	r18, 0x2E	; 46
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
			i++;
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	8a 83       	std	Y+2, r24	; 0x02
		}
		//Geht stelle für stelle der int Zahl durch und schreibt sie in array, von hinten beginnend
		ucDisp[(13 - i)] = (char)(ui2print % 10) + 48;
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	88 2f       	mov	r24, r24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2d e0       	ldi	r18, 0x0D	; 13
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	28 1b       	sub	r18, r24
     76c:	39 0b       	sbc	r19, r25
     76e:	8d 89       	ldd	r24, Y+21	; 0x15
     770:	9e 89       	ldd	r25, Y+22	; 0x16
     772:	4a e0       	ldi	r20, 0x0A	; 10
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	ba 01       	movw	r22, r20
     778:	3d d8       	rcall	.-3974   	; 0xfffff7f4 <__eeprom_end+0xff7ef7f4>
     77a:	40 e3       	ldi	r20, 0x30	; 48
     77c:	48 0f       	add	r20, r24
     77e:	ce 01       	movw	r24, r28
     780:	05 96       	adiw	r24, 0x05	; 5
     782:	82 0f       	add	r24, r18
     784:	93 1f       	adc	r25, r19
     786:	fc 01       	movw	r30, r24
     788:	40 83       	st	Z, r20
		ui2print = ui2print / 10;
     78a:	8d 89       	ldd	r24, Y+21	; 0x15
     78c:	9e 89       	ldd	r25, Y+22	; 0x16
     78e:	2a e0       	ldi	r18, 0x0A	; 10
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	b9 01       	movw	r22, r18
     794:	2f d8       	rcall	.-4002   	; 0xfffff7f4 <__eeprom_end+0xff7ef7f4>
     796:	cb 01       	movw	r24, r22
     798:	9e 8b       	std	Y+22, r25	; 0x16
     79a:	8d 8b       	std	Y+21, r24	; 0x15
		ucNegFlag = 1;
		
	}
	//---------------------------------------------------------------
	//add temp value to array---------------------------------------------------------------------
	for(unsigned char i = 0; i < 6; i++){
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	8a 83       	std	Y+2, r24	; 0x02
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	86 30       	cpi	r24, 0x06	; 6
     7a6:	28 f2       	brcs	.-118    	; 0x732 <Disp_PrintTemperature+0x4a>
		ucDisp[(13 - i)] = (char)(ui2print % 10) + 48;
		ui2print = ui2print / 10;
	}
	//---------------------------------------------------------------------------------------------
	//Replace zeros by spaces-----------------------------------------------------------------------
	unsigned char ucNotZero = 0; //varaible to break while loop at first number not 0
     7a8:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char ucPosDispArray = 8; //Position in array for while loop
     7aa:	88 e0       	ldi	r24, 0x08	; 8
     7ac:	8c 83       	std	Y+4, r24	; 0x04
	while (ucNotZero == 0)
     7ae:	3b c0       	rjmp	.+118    	; 0x826 <Disp_PrintTemperature+0x13e>
	{
		//Breaks if number is not 0 or last digit is reached
		if((ucDisp[ucPosDispArray] != '0') || (ucPosDispArray >= 11) )
     7b0:	8c 81       	ldd	r24, Y+4	; 0x04
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9e 01       	movw	r18, r28
     7b8:	2b 5f       	subi	r18, 0xFB	; 251
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	80 33       	cpi	r24, 0x30	; 48
     7c6:	19 f4       	brne	.+6      	; 0x7ce <Disp_PrintTemperature+0xe6>
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	8b 30       	cpi	r24, 0x0B	; 11
     7cc:	90 f0       	brcs	.+36     	; 0x7f2 <Disp_PrintTemperature+0x10a>
		{
			ucNotZero = 1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	8b 83       	std	Y+3, r24	; 0x03
			if (ucNegFlag == 1) /*showing - if at negative temp*/
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	39 f5       	brne	.+78     	; 0x826 <Disp_PrintTemperature+0x13e>
			{
				ucDisp[(ucPosDispArray-1)] = '-';
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	9e 01       	movw	r18, r28
     7e2:	2b 5f       	subi	r18, 0xFB	; 251
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	2d e2       	ldi	r18, 0x2D	; 45
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
	{
		//Breaks if number is not 0 or last digit is reached
		if((ucDisp[ucPosDispArray] != '0') || (ucPosDispArray >= 11) )
		{
			ucNotZero = 1;
			if (ucNegFlag == 1) /*showing - if at negative temp*/
     7f0:	1a c0       	rjmp	.+52     	; 0x826 <Disp_PrintTemperature+0x13e>
			{
				ucDisp[(ucPosDispArray-1)] = '-';
			}
		}
		
		else if (ucDisp[ucPosDispArray] == '0')
     7f2:	8c 81       	ldd	r24, Y+4	; 0x04
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9e 01       	movw	r18, r28
     7fa:	2b 5f       	subi	r18, 0xFB	; 251
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	80 33       	cpi	r24, 0x30	; 48
     808:	71 f4       	brne	.+28     	; 0x826 <Disp_PrintTemperature+0x13e>
		{
			ucDisp[ucPosDispArray] = ' ';
     80a:	8c 81       	ldd	r24, Y+4	; 0x04
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	9e 01       	movw	r18, r28
     812:	2b 5f       	subi	r18, 0xFB	; 251
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	82 0f       	add	r24, r18
     818:	93 1f       	adc	r25, r19
     81a:	20 e2       	ldi	r18, 0x20	; 32
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
			ucPosDispArray++;
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	8c 83       	std	Y+4, r24	; 0x04
	}
	//---------------------------------------------------------------------------------------------
	//Replace zeros by spaces-----------------------------------------------------------------------
	unsigned char ucNotZero = 0; //varaible to break while loop at first number not 0
	unsigned char ucPosDispArray = 8; //Position in array for while loop
	while (ucNotZero == 0)
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	88 23       	and	r24, r24
     82a:	11 f2       	breq	.-124    	; 0x7b0 <Disp_PrintTemperature+0xc8>
		}
	}
	//------------------------------------------------------------------------------------------------
	
	//Print to Display-----------------------------------------------
	Display_SetCursor(0,0);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	c0 dd       	rcall	.-1152   	; 0x3b2 <Display_SetCursor>
	Display_Print(ucDisp,16);
     832:	ce 01       	movw	r24, r28
     834:	05 96       	adiw	r24, 0x05	; 5
     836:	60 e1       	ldi	r22, 0x10	; 16
     838:	4b de       	rcall	.-874    	; 0x4d0 <Display_Print>
	Display_SetCursor(2,0);		//Platzieren des Cursors auserhalb
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	b9 dd       	rcall	.-1166   	; 0x3b2 <Display_SetCursor>
	//---------------------------------------------------------------
     840:	00 00       	nop
     842:	66 96       	adiw	r28, 0x16	; 22
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <MCP2515_Init>:
//Status: freigegeben
//****************************************************************************************
void MCP2515_OneShotMode(MCP2515_pins sdevice_pins, uint8_t ucone_shot)
{
	MCP2515_Change_Reg(sdevice_pins, CANCTRL, ONE_SHOT_MASK, ucone_shot);
}
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	27 97       	sbiw	r28, 0x07	; 7
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	49 83       	std	Y+1, r20	; 0x01
     86a:	5a 83       	std	Y+2, r21	; 0x02
     86c:	6b 83       	std	Y+3, r22	; 0x03
     86e:	7c 83       	std	Y+4, r23	; 0x04
     870:	8d 83       	std	Y+5, r24	; 0x05
     872:	9e 83       	std	Y+6, r25	; 0x06
     874:	2f 83       	std	Y+7, r18	; 0x07
     876:	49 81       	ldd	r20, Y+1	; 0x01
     878:	5a 81       	ldd	r21, Y+2	; 0x02
     87a:	6b 81       	ldd	r22, Y+3	; 0x03
     87c:	7c 81       	ldd	r23, Y+4	; 0x04
     87e:	8d 81       	ldd	r24, Y+5	; 0x05
     880:	9e 81       	ldd	r25, Y+6	; 0x06
     882:	7f d1       	rcall	.+766    	; 0xb82 <SPI_Master_SlaveSelectInit>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	43 e0       	ldi	r20, 0x03	; 3
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	31 d1       	rcall	.+610    	; 0xaf0 <SPI_Master_Init>
     88e:	20 e8       	ldi	r18, 0x80	; 128
     890:	49 81       	ldd	r20, Y+1	; 0x01
     892:	5a 81       	ldd	r21, Y+2	; 0x02
     894:	6b 81       	ldd	r22, Y+3	; 0x03
     896:	7c 81       	ldd	r23, Y+4	; 0x04
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	9e 81       	ldd	r25, Y+6	; 0x06
     89c:	a2 d0       	rcall	.+324    	; 0x9e2 <MCP2515_Set_OpMode>
     89e:	2f 81       	ldd	r18, Y+7	; 0x07
     8a0:	49 81       	ldd	r20, Y+1	; 0x01
     8a2:	5a 81       	ldd	r21, Y+2	; 0x02
     8a4:	6b 81       	ldd	r22, Y+3	; 0x03
     8a6:	7c 81       	ldd	r23, Y+4	; 0x04
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	ec d0       	rcall	.+472    	; 0xa86 <MCP2515_Set_Baudrate>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	49 81       	ldd	r20, Y+1	; 0x01
     8b2:	5a 81       	ldd	r21, Y+2	; 0x02
     8b4:	6b 81       	ldd	r22, Y+3	; 0x03
     8b6:	7c 81       	ldd	r23, Y+4	; 0x04
     8b8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ba:	9e 81       	ldd	r25, Y+6	; 0x06
     8bc:	bb d0       	rcall	.+374    	; 0xa34 <MCP2515_Change_ClkOut>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	49 81       	ldd	r20, Y+1	; 0x01
     8c2:	5a 81       	ldd	r21, Y+2	; 0x02
     8c4:	6b 81       	ldd	r22, Y+3	; 0x03
     8c6:	7c 81       	ldd	r23, Y+4	; 0x04
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	9e 81       	ldd	r25, Y+6	; 0x06
     8cc:	8a d0       	rcall	.+276    	; 0x9e2 <MCP2515_Set_OpMode>
     8ce:	00 00       	nop
     8d0:	27 96       	adiw	r28, 0x07	; 7
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <MCP2515_Write_Reg>:
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	2b 97       	sbiw	r28, 0x0b	; 11
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	4a 83       	std	Y+2, r20	; 0x02
     8fe:	5b 83       	std	Y+3, r21	; 0x03
     900:	6c 83       	std	Y+4, r22	; 0x04
     902:	7d 83       	std	Y+5, r23	; 0x05
     904:	8e 83       	std	Y+6, r24	; 0x06
     906:	9f 83       	std	Y+7, r25	; 0x07
     908:	28 87       	std	Y+8, r18	; 0x08
     90a:	09 87       	std	Y+9, r16	; 0x09
     90c:	fb 86       	std	Y+11, r15	; 0x0b
     90e:	ea 86       	std	Y+10, r14	; 0x0a
     910:	4a 81       	ldd	r20, Y+2	; 0x02
     912:	5b 81       	ldd	r21, Y+3	; 0x03
     914:	6c 81       	ldd	r22, Y+4	; 0x04
     916:	7d 81       	ldd	r23, Y+5	; 0x05
     918:	8e 81       	ldd	r24, Y+6	; 0x06
     91a:	9f 81       	ldd	r25, Y+7	; 0x07
     91c:	71 d1       	rcall	.+738    	; 0xc00 <SPI_Master_Start>
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	c6 d1       	rcall	.+908    	; 0xcae <SPI_Master_Write>
     922:	88 85       	ldd	r24, Y+8	; 0x08
     924:	c4 d1       	rcall	.+904    	; 0xcae <SPI_Master_Write>
     926:	19 82       	std	Y+1, r1	; 0x01
     928:	0d c0       	rjmp	.+26     	; 0x944 <MCP2515_Write_Reg+0x62>
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2a 85       	ldd	r18, Y+10	; 0x0a
     932:	3b 85       	ldd	r19, Y+11	; 0x0b
     934:	82 0f       	add	r24, r18
     936:	93 1f       	adc	r25, r19
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	b8 d1       	rcall	.+880    	; 0xcae <SPI_Master_Write>
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	99 81       	ldd	r25, Y+1	; 0x01
     946:	89 85       	ldd	r24, Y+9	; 0x09
     948:	98 17       	cp	r25, r24
     94a:	78 f3       	brcs	.-34     	; 0x92a <MCP2515_Write_Reg+0x48>
     94c:	4a 81       	ldd	r20, Y+2	; 0x02
     94e:	5b 81       	ldd	r21, Y+3	; 0x03
     950:	6c 81       	ldd	r22, Y+4	; 0x04
     952:	7d 81       	ldd	r23, Y+5	; 0x05
     954:	8e 81       	ldd	r24, Y+6	; 0x06
     956:	9f 81       	ldd	r25, Y+7	; 0x07
     958:	7f d1       	rcall	.+766    	; 0xc58 <SPI_Master_Stop>
     95a:	00 00       	nop
     95c:	2b 96       	adiw	r28, 0x0b	; 11
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <MCP2515_Change_Reg>:
     974:	ef 92       	push	r14
     976:	0f 93       	push	r16
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	29 97       	sbiw	r28, 0x09	; 9
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	49 83       	std	Y+1, r20	; 0x01
     98e:	5a 83       	std	Y+2, r21	; 0x02
     990:	6b 83       	std	Y+3, r22	; 0x03
     992:	7c 83       	std	Y+4, r23	; 0x04
     994:	8d 83       	std	Y+5, r24	; 0x05
     996:	9e 83       	std	Y+6, r25	; 0x06
     998:	2f 83       	std	Y+7, r18	; 0x07
     99a:	08 87       	std	Y+8, r16	; 0x08
     99c:	e9 86       	std	Y+9, r14	; 0x09
     99e:	49 81       	ldd	r20, Y+1	; 0x01
     9a0:	5a 81       	ldd	r21, Y+2	; 0x02
     9a2:	6b 81       	ldd	r22, Y+3	; 0x03
     9a4:	7c 81       	ldd	r23, Y+4	; 0x04
     9a6:	8d 81       	ldd	r24, Y+5	; 0x05
     9a8:	9e 81       	ldd	r25, Y+6	; 0x06
     9aa:	2a d1       	rcall	.+596    	; 0xc00 <SPI_Master_Start>
     9ac:	85 e0       	ldi	r24, 0x05	; 5
     9ae:	7f d1       	rcall	.+766    	; 0xcae <SPI_Master_Write>
     9b0:	8f 81       	ldd	r24, Y+7	; 0x07
     9b2:	7d d1       	rcall	.+762    	; 0xcae <SPI_Master_Write>
     9b4:	88 85       	ldd	r24, Y+8	; 0x08
     9b6:	7b d1       	rcall	.+758    	; 0xcae <SPI_Master_Write>
     9b8:	89 85       	ldd	r24, Y+9	; 0x09
     9ba:	79 d1       	rcall	.+754    	; 0xcae <SPI_Master_Write>
     9bc:	49 81       	ldd	r20, Y+1	; 0x01
     9be:	5a 81       	ldd	r21, Y+2	; 0x02
     9c0:	6b 81       	ldd	r22, Y+3	; 0x03
     9c2:	7c 81       	ldd	r23, Y+4	; 0x04
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	9e 81       	ldd	r25, Y+6	; 0x06
     9c8:	47 d1       	rcall	.+654    	; 0xc58 <SPI_Master_Stop>
     9ca:	00 00       	nop
     9cc:	29 96       	adiw	r28, 0x09	; 9
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	0f 91       	pop	r16
     9de:	ef 90       	pop	r14
     9e0:	08 95       	ret

000009e2 <MCP2515_Set_OpMode>:
     9e2:	ef 92       	push	r14
     9e4:	0f 93       	push	r16
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	27 97       	sbiw	r28, 0x07	; 7
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	49 83       	std	Y+1, r20	; 0x01
     9fc:	5a 83       	std	Y+2, r21	; 0x02
     9fe:	6b 83       	std	Y+3, r22	; 0x03
     a00:	7c 83       	std	Y+4, r23	; 0x04
     a02:	8d 83       	std	Y+5, r24	; 0x05
     a04:	9e 83       	std	Y+6, r25	; 0x06
     a06:	2f 83       	std	Y+7, r18	; 0x07
     a08:	ef 80       	ldd	r14, Y+7	; 0x07
     a0a:	00 ee       	ldi	r16, 0xE0	; 224
     a0c:	2f e0       	ldi	r18, 0x0F	; 15
     a0e:	49 81       	ldd	r20, Y+1	; 0x01
     a10:	5a 81       	ldd	r21, Y+2	; 0x02
     a12:	6b 81       	ldd	r22, Y+3	; 0x03
     a14:	7c 81       	ldd	r23, Y+4	; 0x04
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	ac df       	rcall	.-168    	; 0x974 <MCP2515_Change_Reg>
     a1c:	00 00       	nop
     a1e:	27 96       	adiw	r28, 0x07	; 7
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	0f 91       	pop	r16
     a30:	ef 90       	pop	r14
     a32:	08 95       	ret

00000a34 <MCP2515_Change_ClkOut>:
     a34:	ef 92       	push	r14
     a36:	0f 93       	push	r16
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	27 97       	sbiw	r28, 0x07	; 7
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	49 83       	std	Y+1, r20	; 0x01
     a4e:	5a 83       	std	Y+2, r21	; 0x02
     a50:	6b 83       	std	Y+3, r22	; 0x03
     a52:	7c 83       	std	Y+4, r23	; 0x04
     a54:	8d 83       	std	Y+5, r24	; 0x05
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	2f 83       	std	Y+7, r18	; 0x07
     a5a:	ef 80       	ldd	r14, Y+7	; 0x07
     a5c:	07 e0       	ldi	r16, 0x07	; 7
     a5e:	2f e0       	ldi	r18, 0x0F	; 15
     a60:	49 81       	ldd	r20, Y+1	; 0x01
     a62:	5a 81       	ldd	r21, Y+2	; 0x02
     a64:	6b 81       	ldd	r22, Y+3	; 0x03
     a66:	7c 81       	ldd	r23, Y+4	; 0x04
     a68:	8d 81       	ldd	r24, Y+5	; 0x05
     a6a:	9e 81       	ldd	r25, Y+6	; 0x06
     a6c:	83 df       	rcall	.-250    	; 0x974 <MCP2515_Change_Reg>
     a6e:	00 00       	nop
     a70:	27 96       	adiw	r28, 0x07	; 7
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	0f 91       	pop	r16
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <MCP2515_Set_Baudrate>:
//Rückgabeparameter:		kein
//Revision:
//Status: freigegeben
//****************************************************************************************
void MCP2515_Set_Baudrate(MCP2515_pins sdevice_pins, uint8_t ucbaud)
{
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	27 97       	sbiw	r28, 0x07	; 7
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	49 83       	std	Y+1, r20	; 0x01
     aa2:	5a 83       	std	Y+2, r21	; 0x02
     aa4:	6b 83       	std	Y+3, r22	; 0x03
     aa6:	7c 83       	std	Y+4, r23	; 0x04
     aa8:	8d 83       	std	Y+5, r24	; 0x05
     aaa:	9e 83       	std	Y+6, r25	; 0x06
     aac:	2f 83       	std	Y+7, r18	; 0x07
	MCP2515_Write_Reg(sdevice_pins, CNF3, 3, ucBaudrate[ucbaud]);
     aae:	8f 81       	ldd	r24, Y+7	; 0x07
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	c9 01       	movw	r24, r18
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	89 5e       	subi	r24, 0xE9	; 233
     ac0:	9e 4f       	sbci	r25, 0xFE	; 254
     ac2:	7c 01       	movw	r14, r24
     ac4:	03 e0       	ldi	r16, 0x03	; 3
     ac6:	28 e2       	ldi	r18, 0x28	; 40
     ac8:	49 81       	ldd	r20, Y+1	; 0x01
     aca:	5a 81       	ldd	r21, Y+2	; 0x02
     acc:	6b 81       	ldd	r22, Y+3	; 0x03
     ace:	7c 81       	ldd	r23, Y+4	; 0x04
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	06 df       	rcall	.-500    	; 0x8e2 <MCP2515_Write_Reg>
}
     ad6:	00 00       	nop
     ad8:	27 96       	adiw	r28, 0x07	; 7
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <SPI_Master_Init>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Init(uint8_t ucspi_interrupt, uint8_t ucspi_data_order, uint8_t ucspi_mode, uint8_t ucspi_sck_freq)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <SPI_Master_Init+0x6>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <SPI_Master_Init+0x8>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	6a 83       	std	Y+2, r22	; 0x02
     b00:	4b 83       	std	Y+3, r20	; 0x03
     b02:	2c 83       	std	Y+4, r18	; 0x04
	SPI_MOSI_DDR_REG |= 1 << SPI_MOSI_BIT;		//MOSI-Pin wird auf Ausgang deklariert
     b04:	84 e2       	ldi	r24, 0x24	; 36
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	24 e2       	ldi	r18, 0x24	; 36
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	20 81       	ld	r18, Z
     b10:	28 60       	ori	r18, 0x08	; 8
     b12:	fc 01       	movw	r30, r24
     b14:	20 83       	st	Z, r18
	SPI_MISO_DDR_REG &= ~(1 << SPI_MISO_BIT);	//MISO-Pin wird auf Eingang deklariert
     b16:	84 e2       	ldi	r24, 0x24	; 36
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	24 e2       	ldi	r18, 0x24	; 36
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	2f 7e       	andi	r18, 0xEF	; 239
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
	SPI_CLK_DDR_REG |= 1 << SPI_CLK_BIT;		//CLK-Pin wird auf Ausgang deklariert
     b28:	84 e2       	ldi	r24, 0x24	; 36
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	24 e2       	ldi	r18, 0x24	; 36
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	20 62       	ori	r18, 0x20	; 32
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
	
	SPI_CONTROL_REGISTER = SPI_MASTER | SPI_ENABLE | ucspi_interrupt | ucspi_data_order | (ucspi_mode << 2) | (ucspi_sck_freq % 4);
     b3a:	8c e4       	ldi	r24, 0x4C	; 76
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	39 81       	ldd	r19, Y+1	; 0x01
     b40:	2a 81       	ldd	r18, Y+2	; 0x02
     b42:	43 2f       	mov	r20, r19
     b44:	42 2b       	or	r20, r18
     b46:	2b 81       	ldd	r18, Y+3	; 0x03
     b48:	22 2f       	mov	r18, r18
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	22 0f       	add	r18, r18
     b4e:	33 1f       	adc	r19, r19
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	34 2f       	mov	r19, r20
     b56:	32 2b       	or	r19, r18
     b58:	2c 81       	ldd	r18, Y+4	; 0x04
     b5a:	23 70       	andi	r18, 0x03	; 3
     b5c:	23 2b       	or	r18, r19
     b5e:	20 65       	ori	r18, 0x50	; 80
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
		//µC wird als Master deklariert, die SPI-Schnittstelle wird freigegeben
		//falls gewünscht, es wird das SPI-Interrupt freigegeben und die Bitreihenfolge wird bestimmt
		//der Übertragungsmodus wird bestimmt

	SPI_STATUS_REGISTER = ucspi_sck_freq / 4;
     b64:	8d e4       	ldi	r24, 0x4D	; 77
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2c 81       	ldd	r18, Y+4	; 0x04
     b6a:	26 95       	lsr	r18
     b6c:	26 95       	lsr	r18
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
		//die gewünschte SPI-Taktfrequenz wird gewählt
}
     b72:	00 00       	nop
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <SPI_Master_SlaveSelectInit>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_SlaveSelectInit(tspiHandle tspi_pins)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <SPI_Master_SlaveSelectInit+0x6>
     b88:	00 d0       	rcall	.+0      	; 0xb8a <SPI_Master_SlaveSelectInit+0x8>
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <SPI_Master_SlaveSelectInit+0xa>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	49 83       	std	Y+1, r20	; 0x01
     b92:	5a 83       	std	Y+2, r21	; 0x02
     b94:	6b 83       	std	Y+3, r22	; 0x03
     b96:	7c 83       	std	Y+4, r23	; 0x04
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_DDR |= 1 << tspi_pins.CS_pin;
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	29 81       	ldd	r18, Y+1	; 0x01
     ba2:	3a 81       	ldd	r19, Y+2	; 0x02
     ba4:	f9 01       	movw	r30, r18
     ba6:	20 81       	ld	r18, Z
     ba8:	62 2f       	mov	r22, r18
     baa:	2d 81       	ldd	r18, Y+5	; 0x05
     bac:	42 2f       	mov	r20, r18
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <SPI_Master_SlaveSelectInit+0x38>
     bb6:	22 0f       	add	r18, r18
     bb8:	33 1f       	adc	r19, r19
     bba:	4a 95       	dec	r20
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <SPI_Master_SlaveSelectInit+0x34>
     bbe:	26 2b       	or	r18, r22
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
	*tspi_pins.CS_PORT |= 1 << tspi_pins.CS_pin;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	2b 81       	ldd	r18, Y+3	; 0x03
     bca:	3c 81       	ldd	r19, Y+4	; 0x04
     bcc:	f9 01       	movw	r30, r18
     bce:	20 81       	ld	r18, Z
     bd0:	62 2f       	mov	r22, r18
     bd2:	2d 81       	ldd	r18, Y+5	; 0x05
     bd4:	42 2f       	mov	r20, r18
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <SPI_Master_SlaveSelectInit+0x60>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	4a 95       	dec	r20
     be4:	e2 f7       	brpl	.-8      	; 0xbde <SPI_Master_SlaveSelectInit+0x5c>
     be6:	26 2b       	or	r18, r22
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
}
     bec:	00 00       	nop
     bee:	26 96       	adiw	r28, 0x06	; 6
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <SPI_Master_Start>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Start(tspiHandle tspi_pins)
{
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 d0       	rcall	.+0      	; 0xc06 <SPI_Master_Start+0x6>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <SPI_Master_Start+0x8>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <SPI_Master_Start+0xa>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	49 83       	std	Y+1, r20	; 0x01
     c10:	5a 83       	std	Y+2, r21	; 0x02
     c12:	6b 83       	std	Y+3, r22	; 0x03
     c14:	7c 83       	std	Y+4, r23	; 0x04
     c16:	8d 83       	std	Y+5, r24	; 0x05
     c18:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_PORT &= ~(1 << tspi_pins.CS_pin);
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	2b 81       	ldd	r18, Y+3	; 0x03
     c20:	3c 81       	ldd	r19, Y+4	; 0x04
     c22:	f9 01       	movw	r30, r18
     c24:	20 81       	ld	r18, Z
     c26:	62 2f       	mov	r22, r18
     c28:	2d 81       	ldd	r18, Y+5	; 0x05
     c2a:	42 2f       	mov	r20, r18
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <SPI_Master_Start+0x38>
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	4a 95       	dec	r20
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <SPI_Master_Start+0x34>
     c3c:	20 95       	com	r18
     c3e:	26 23       	and	r18, r22
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
}
     c44:	00 00       	nop
     c46:	26 96       	adiw	r28, 0x06	; 6
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <SPI_Master_Stop>:
//Rückgabeparameter:		keine
//Revision:
//Status: freigegeben
//****************************************************************************************
void SPI_Master_Stop(tspiHandle tspi_pins)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <SPI_Master_Stop+0x6>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <SPI_Master_Stop+0x8>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <SPI_Master_Stop+0xa>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	49 83       	std	Y+1, r20	; 0x01
     c68:	5a 83       	std	Y+2, r21	; 0x02
     c6a:	6b 83       	std	Y+3, r22	; 0x03
     c6c:	7c 83       	std	Y+4, r23	; 0x04
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	9e 83       	std	Y+6, r25	; 0x06
	*tspi_pins.CS_PORT |= (1 << tspi_pins.CS_pin);
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	2b 81       	ldd	r18, Y+3	; 0x03
     c78:	3c 81       	ldd	r19, Y+4	; 0x04
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	62 2f       	mov	r22, r18
     c80:	2d 81       	ldd	r18, Y+5	; 0x05
     c82:	42 2f       	mov	r20, r18
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <SPI_Master_Stop+0x38>
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	4a 95       	dec	r20
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <SPI_Master_Stop+0x34>
     c94:	26 2b       	or	r18, r22
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
}
     c9a:	00 00       	nop
     c9c:	26 96       	adiw	r28, 0x06	; 6
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <SPI_Master_Write>:
//Rückgabeparameter:		das empfangene Byte
//Revision:
//Status: freigegeben
//****************************************************************************************
uint8_t SPI_Master_Write(uint8_t ucdata)
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	89 83       	std	Y+1, r24	; 0x01
	SPI_DATA_REGISTER = ucdata;
     cba:	8e e4       	ldi	r24, 0x4E	; 78
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	29 81       	ldd	r18, Y+1	; 0x01
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
	while(SPI_RUNNING);
     cc4:	00 00       	nop
     cc6:	8d e4       	ldi	r24, 0x4D	; 77
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	88 23       	and	r24, r24
     cd0:	d4 f7       	brge	.-12     	; 0xcc6 <SPI_Master_Write+0x18>
	return SPI_DATA_REGISTER;
     cd2:	8e e4       	ldi	r24, 0x4E	; 78
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	fc 01       	movw	r30, r24
     cd8:	80 81       	ld	r24, Z
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <Timer1_Init>:
unsigned char ucFlag_1s = 0;
unsigned char ucCNt_100ms = 0;
unsigned char ucFlag_100ms = 0;

//Definition of functions
void Timer1_Init(){
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	//Version:			1
	//Datum:			220427
	//Autor:			mh
	//Status:			ok
	//-------------------------------------------------------------------
	TCCR1A |= (1<<WGM11);					//CTC-Modus
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	20 e8       	ldi	r18, 0x80	; 128
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	f9 01       	movw	r30, r18
     cf4:	20 81       	ld	r18, Z
     cf6:	22 60       	ori	r18, 0x02	; 2
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 83       	st	Z, r18
	TCCR1B |= ((1<<CS10) | (1<<CS12));		//Prescaler=1024
     cfc:	81 e8       	ldi	r24, 0x81	; 129
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	21 e8       	ldi	r18, 0x81	; 129
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	25 60       	ori	r18, 0x05	; 5
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
	OCR0A = 179;							//10ms @f=18.432MHz
     d0e:	87 e4       	ldi	r24, 0x47	; 71
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	23 eb       	ldi	r18, 0xB3	; 179
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
	TIMSK1 |= 1<<OCIE1A;					//Freigabe des Timerinterrupt
     d18:	8f e6       	ldi	r24, 0x6F	; 111
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	2f e6       	ldi	r18, 0x6F	; 111
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	20 81       	ld	r18, Z
     d24:	22 60       	ori	r18, 0x02	; 2
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	sei();									//alle Interrupts freigegeben
     d2a:	78 94       	sei
}
     d2c:	00 00       	nop
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <__vector_11>:

ISR(TIMER1_COMPA_vect){
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	8f 93       	push	r24
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	//Version:			2
	//Datum:			220427
	//Autor:			mh
	//Status:			ok
	//-------------------------------------------------------------------
	ucFlag10ms = 1;			//wird jede 10ms gesetzt
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	ucCNt_1s++;
     d50:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <ucCNt_1s>
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ucCNt_1s>
	ucCNt_100ms++;
     d5a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <ucCNt_100ms>
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ucCNt_100ms>
	
	if(ucCNt_1s == 100){
     d64:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <ucCNt_1s>
     d68:	84 36       	cpi	r24, 0x64	; 100
     d6a:	29 f4       	brne	.+10     	; 0xd76 <__vector_11+0x42>
		ucCNt_1s = 0;
     d6c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <ucCNt_1s>
		ucFlag_1s = 1;		//wird jede sekunde gesetzt
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <ucFlag_1s>
	}
	
	if(ucCNt_100ms == 10){
     d76:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <ucCNt_100ms>
     d7a:	8a 30       	cpi	r24, 0x0A	; 10
     d7c:	29 f4       	brne	.+10     	; 0xd88 <__vector_11+0x54>
		ucCNt_100ms = 0;
     d7e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ucCNt_100ms>
		ucFlag_100ms = 1;		//wird jede sekunde gesetzt
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <ucFlag_100ms>
	}
}
     d88:	00 00       	nop
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	8f 91       	pop	r24
     d90:	0f 90       	pop	r0
     d92:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <Timer1_get_10msState>:

unsigned char Timer1_get_10msState(){
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	//Version:			1
	//Datum:			220427
	//Autor:			mh
	//Status:			ok
	//-------------------------------------------------------------------
	if(ucFlag10ms == 1){
     da4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	21 f4       	brne	.+8      	; 0xdb4 <Timer1_get_10msState+0x18>
		ucFlag10ms = 0;
     dac:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		return TIMER_TRIGGERED;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <Timer1_get_10msState+0x1a>
	}
	return TIMER_RUNNING;
     db4:	80 e0       	ldi	r24, 0x00	; 0
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <__vector_7>:
	OCR2A = 179;
	TIMSK2 |= (1 << OCIE2A);
}

ISR(TIMER2_COMPA_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	8f 93       	push	r24
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	uc10MsFlag=1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <uc10MsFlag>
	uc10MsCnt++;
     dd8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uc10MsCnt>
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <uc10MsCnt>

	if (uc10MsCnt==10)
     de2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <uc10MsCnt>
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	99 f4       	brne	.+38     	; 0xe10 <__vector_7+0x54>
	{
		uc100MsFlag=1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <uc100MsFlag>
		uc100MsCnt++;
     df0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <uc100MsCnt>
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <uc100MsCnt>
		uc10MsCnt=0;
     dfa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <uc10MsCnt>
		if (uc100MsCnt==10)
     dfe:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <uc100MsCnt>
     e02:	8a 30       	cpi	r24, 0x0A	; 10
     e04:	29 f4       	brne	.+10     	; 0xe10 <__vector_7+0x54>
		{
			uc1sFlag=1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <uc1sFlag>
			uc100MsCnt=0;
     e0c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <uc100MsCnt>
		}
	}
     e10:	00 00       	nop
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	8f 91       	pop	r24
     e18:	0f 90       	pop	r0
     e1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <TMP75_Read_Temperature>:
//Variables
int iTemperature;

//Definition of funcitons
uint8_t TMP75_Read_Temperature(uint8_t ucdevice_address, uint8_t uctemp2read)
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	00 d0       	rcall	.+0      	; 0xe2a <TMP75_Read_Temperature+0x6>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <TMP75_Read_Temperature+0x8>
     e2c:	1f 92       	push	r1
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	8c 83       	std	Y+4, r24	; 0x04
     e34:	6d 83       	std	Y+5, r22	; 0x05
	//Status:			not testet
	//--------------------------------
	
	uint8_t ucDeviceAddress, ucTempHigh, ucTempLow;
	//Adresse des TMP75-Temperatursensors bilden
	ucDeviceAddress = (ucdevice_address << 1) | TMP75_DEVICE_TYPE_ADDRESS;
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	88 0f       	add	r24, r24
     e3a:	89 83       	std	Y+1, r24	; 0x01
	ucDeviceAddress |= TWI_WRITE;//Write-Modus
	TWI_Master_Start();//Start
     e3c:	5b d1       	rcall	.+694    	; 0x10f4 <TWI_Master_Start>
	if((TWI_STATUS_REGISTER) != TWI_START) return TWI_ERROR;
     e3e:	89 eb       	ldi	r24, 0xB9	; 185
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	88 7f       	andi	r24, 0xF8	; 248
     e4c:	99 27       	eor	r25, r25
     e4e:	08 97       	sbiw	r24, 0x08	; 8
     e50:	11 f0       	breq	.+4      	; 0xe56 <TMP75_Read_Temperature+0x32>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	6d c0       	rjmp	.+218    	; 0xf30 <TMP75_Read_Temperature+0x10c>
	TWI_Master_Transmit(ucDeviceAddress); //Device-Adresse senden
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	6e d1       	rcall	.+732    	; 0x1136 <TWI_Master_Transmit>
	if((TWI_STATUS_REGISTER) != TWI_MT_SLA_ACK) return TWI_ERROR;
     e5a:	89 eb       	ldi	r24, 0xB9	; 185
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	88 7f       	andi	r24, 0xF8	; 248
     e68:	99 27       	eor	r25, r25
     e6a:	48 97       	sbiw	r24, 0x18	; 24
     e6c:	11 f0       	breq	.+4      	; 0xe72 <TMP75_Read_Temperature+0x4e>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	5f c0       	rjmp	.+190    	; 0xf30 <TMP75_Read_Temperature+0x10c>
	//die Adresse des gewünschten Temperaturregisters wird gesendet
	TWI_Master_Transmit(uctemp2read);
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	60 d1       	rcall	.+704    	; 0x1136 <TWI_Master_Transmit>
	if((TWI_STATUS_REGISTER) != TWI_MT_DATA_ACK) return TWI_ERROR;
     e76:	89 eb       	ldi	r24, 0xB9	; 185
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	99 27       	eor	r25, r25
     e86:	88 97       	sbiw	r24, 0x28	; 40
     e88:	11 f0       	breq	.+4      	; 0xe8e <TMP75_Read_Temperature+0x6a>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	51 c0       	rjmp	.+162    	; 0xf30 <TMP75_Read_Temperature+0x10c>
	TWI_Master_Start(); //Restart
     e8e:	32 d1       	rcall	.+612    	; 0x10f4 <TWI_Master_Start>
	if((TWI_STATUS_REGISTER) != TWI_RESTART) return TWI_ERROR;
     e90:	89 eb       	ldi	r24, 0xB9	; 185
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	fc 01       	movw	r30, r24
     e96:	80 81       	ld	r24, Z
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	88 7f       	andi	r24, 0xF8	; 248
     e9e:	99 27       	eor	r25, r25
     ea0:	40 97       	sbiw	r24, 0x10	; 16
     ea2:	11 f0       	breq	.+4      	; 0xea8 <TMP75_Read_Temperature+0x84>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	44 c0       	rjmp	.+136    	; 0xf30 <TMP75_Read_Temperature+0x10c>
	ucDeviceAddress = (ucdevice_address << 1) | TMP75_DEVICE_TYPE_ADDRESS | TWI_READ;
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
	TWI_Master_Transmit(ucDeviceAddress); //Device-Adresse im Read-Modus senden
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	3e d1       	rcall	.+636    	; 0x1136 <TWI_Master_Transmit>
	if((TWI_STATUS_REGISTER) != TWI_MR_SLA_ACK) return TWI_ERROR;
     eba:	89 eb       	ldi	r24, 0xB9	; 185
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	99 27       	eor	r25, r25
     eca:	80 34       	cpi	r24, 0x40	; 64
     ecc:	91 05       	cpc	r25, r1
     ece:	11 f0       	breq	.+4      	; 0xed4 <TMP75_Read_Temperature+0xb0>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	2e c0       	rjmp	.+92     	; 0xf30 <TMP75_Read_Temperature+0x10c>
	//Inhalt des adressierten Registers wird eingelesen
	ucTempHigh = TWI_Master_Read_Ack();
     ed4:	4c d1       	rcall	.+664    	; 0x116e <TWI_Master_Read_Ack>
     ed6:	8a 83       	std	Y+2, r24	; 0x02
	if((TWI_STATUS_REGISTER) != TWI_MR_DATA_ACK) return TWI_ERROR;
     ed8:	89 eb       	ldi	r24, 0xB9	; 185
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	fc 01       	movw	r30, r24
     ede:	80 81       	ld	r24, Z
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 7f       	andi	r24, 0xF8	; 248
     ee6:	99 27       	eor	r25, r25
     ee8:	80 35       	cpi	r24, 0x50	; 80
     eea:	91 05       	cpc	r25, r1
     eec:	11 f0       	breq	.+4      	; 0xef2 <TMP75_Read_Temperature+0xce>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <TMP75_Read_Temperature+0x10c>
	ucTempLow = TWI_Master_Read_NAck();
     ef2:	54 d1       	rcall	.+680    	; 0x119c <TWI_Master_Read_NAck>
     ef4:	8b 83       	std	Y+3, r24	; 0x03
	if((TWI_STATUS_REGISTER) != TWI_MR_DATA_NACK) return TWI_ERROR;
     ef6:	89 eb       	ldi	r24, 0xB9	; 185
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 7f       	andi	r24, 0xF8	; 248
     f04:	99 27       	eor	r25, r25
     f06:	88 35       	cpi	r24, 0x58	; 88
     f08:	91 05       	cpc	r25, r1
     f0a:	11 f0       	breq	.+4      	; 0xf10 <TMP75_Read_Temperature+0xec>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	10 c0       	rjmp	.+32     	; 0xf30 <TMP75_Read_Temperature+0x10c>
	TWI_Master_Stop(); //Stopp
     f10:	05 d1       	rcall	.+522    	; 0x111c <TWI_Master_Stop>
	iTemperature = (ucTempHigh << 8) + ucTempLow;
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	38 2f       	mov	r19, r24
     f1a:	22 27       	eor	r18, r18
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <iTemperature+0x1>
     f2a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <iTemperature>
	return TWI_OK;	
     f2e:	80 e0       	ldi	r24, 0x00	; 0
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <TMP75_Get_Temperature>:

int TMP75_Get_Temperature(void)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	27 97       	sbiw	r28, 0x07	; 7
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
	//Autor:			Moritz
	//Source:			
	//Status:			released
	//--------------------------------	
	int iTempC;		//Return value 
	unsigned char ucNegFlag = 0;	//Gets one if temp is negative
     f54:	1b 82       	std	Y+3, r1	; 0x03
	double dTempComma; //helps dealing with decimal
	
	iTempC = iTemperature /256; //change to degree celcius
     f56:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <iTemperature>
     f5a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <iTemperature+0x1>
     f5e:	99 23       	and	r25, r25
     f60:	14 f4       	brge	.+4      	; 0xf66 <TMP75_Get_Temperature+0x26>
     f62:	81 50       	subi	r24, 0x01	; 1
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	89 2f       	mov	r24, r25
     f68:	99 0f       	add	r25, r25
     f6a:	99 0b       	sbc	r25, r25
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	dTempComma = iTemperature /256.00;
     f70:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <iTemperature>
     f74:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <iTemperature+0x1>
     f78:	09 2e       	mov	r0, r25
     f7a:	00 0c       	add	r0, r0
     f7c:	aa 0b       	sbc	r26, r26
     f7e:	bb 0b       	sbc	r27, r27
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	10 d3       	rcall	.+1568   	; 0x15a6 <__floatsisf>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	53 e4       	ldi	r21, 0x43	; 67
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	6c d2       	rcall	.+1240   	; 0x1470 <__divsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8c 83       	std	Y+4, r24	; 0x04
     f9e:	9d 83       	std	Y+5, r25	; 0x05
     fa0:	ae 83       	std	Y+6, r26	; 0x06
     fa2:	bf 83       	std	Y+7, r27	; 0x07
	if (iTempC < 0)/*Turns neg number to positive for rounding*/
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	99 23       	and	r25, r25
     faa:	94 f4       	brge	.+36     	; 0xfd0 <TMP75_Get_Temperature+0x90>
	{
		iTempC = iTempC *(-1);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	91 95       	neg	r25
     fb2:	81 95       	neg	r24
     fb4:	91 09       	sbc	r25, r1
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
		dTempComma = dTempComma *(-1);
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	ae 81       	ldd	r26, Y+6	; 0x06
     fc0:	bf 81       	ldd	r27, Y+7	; 0x07
     fc2:	b0 58       	subi	r27, 0x80	; 128
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	9d 83       	std	Y+5, r25	; 0x05
     fc8:	ae 83       	std	Y+6, r26	; 0x06
     fca:	bf 83       	std	Y+7, r27	; 0x07
		ucNegFlag = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8b 83       	std	Y+3, r24	; 0x03
	}
	//round in 0,5 steps------------
	dTempComma = dTempComma - iTempC; //only comma value remains
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	09 2e       	mov	r0, r25
     fd6:	00 0c       	add	r0, r0
     fd8:	aa 0b       	sbc	r26, r26
     fda:	bb 0b       	sbc	r27, r27
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	e2 d2       	rcall	.+1476   	; 0x15a6 <__floatsisf>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9c 01       	movw	r18, r24
     fe8:	ad 01       	movw	r20, r26
     fea:	6c 81       	ldd	r22, Y+4	; 0x04
     fec:	7d 81       	ldd	r23, Y+5	; 0x05
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	d5 d1       	rcall	.+938    	; 0x139e <__subsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	9d 83       	std	Y+5, r25	; 0x05
     ffc:	ae 83       	std	Y+6, r26	; 0x06
     ffe:	bf 83       	std	Y+7, r27	; 0x07
	if (dTempComma < 0.25)
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5e e3       	ldi	r21, 0x3E	; 62
    1008:	6c 81       	ldd	r22, Y+4	; 0x04
    100a:	7d 81       	ldd	r23, Y+5	; 0x05
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	9f 81       	ldd	r25, Y+7	; 0x07
    1010:	2b d2       	rcall	.+1110   	; 0x1468 <__cmpsf2>
    1012:	88 23       	and	r24, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <TMP75_Get_Temperature+0xe0>
	{
		dTempComma = 0;
    1016:	1c 82       	std	Y+4, r1	; 0x04
    1018:	1d 82       	std	Y+5, r1	; 0x05
    101a:	1e 82       	std	Y+6, r1	; 0x06
    101c:	1f 82       	std	Y+7, r1	; 0x07
    101e:	1c c0       	rjmp	.+56     	; 0x1058 <TMP75_Get_Temperature+0x118>
	}
	else if (dTempComma < 0.75)
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e4       	ldi	r20, 0x40	; 64
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	6c 81       	ldd	r22, Y+4	; 0x04
    102a:	7d 81       	ldd	r23, Y+5	; 0x05
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	1b d2       	rcall	.+1078   	; 0x1468 <__cmpsf2>
    1032:	88 23       	and	r24, r24
    1034:	4c f4       	brge	.+18     	; 0x1048 <TMP75_Get_Temperature+0x108>
	{
		dTempComma = 0.5;
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	bf e3       	ldi	r27, 0x3F	; 63
    103e:	8c 83       	std	Y+4, r24	; 0x04
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	ae 83       	std	Y+6, r26	; 0x06
    1044:	bf 83       	std	Y+7, r27	; 0x07
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <TMP75_Get_Temperature+0x118>
	}
	else
	{
		dTempComma = 1;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 e8       	ldi	r26, 0x80	; 128
    104e:	bf e3       	ldi	r27, 0x3F	; 63
    1050:	8c 83       	std	Y+4, r24	; 0x04
    1052:	9d 83       	std	Y+5, r25	; 0x05
    1054:	ae 83       	std	Y+6, r26	; 0x06
    1056:	bf 83       	std	Y+7, r27	; 0x07
	}
	iTempC = (iTempC + dTempComma) *10;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	09 2e       	mov	r0, r25
    105e:	00 0c       	add	r0, r0
    1060:	aa 0b       	sbc	r26, r26
    1062:	bb 0b       	sbc	r27, r27
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	9e d2       	rcall	.+1340   	; 0x15a6 <__floatsisf>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	2c 81       	ldd	r18, Y+4	; 0x04
    1070:	3d 81       	ldd	r19, Y+5	; 0x05
    1072:	4e 81       	ldd	r20, Y+6	; 0x06
    1074:	5f 81       	ldd	r21, Y+7	; 0x07
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	92 d1       	rcall	.+804    	; 0x13a0 <__addsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	3c d3       	rcall	.+1656   	; 0x1706 <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	54 d2       	rcall	.+1192   	; 0x1540 <__fixsfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
	//------------------------------------
	if (ucNegFlag == 1) /*Makes neg number neg*/
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	39 f4       	brne	.+14     	; 0x10b4 <TMP75_Get_Temperature+0x174>
	{
		iTempC = iTempC * (-1);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	91 95       	neg	r25
    10ac:	81 95       	neg	r24
    10ae:	91 09       	sbc	r25, r1
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return iTempC;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	27 96       	adiw	r28, 0x07	; 7
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <TWI_Master_Init>:


void TWI_Set_ErrorFlag(void)
{
	ucTWI_ErrorFlag = 1;
}
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	8c eb       	ldi	r24, 0xBC	; 188
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	24 e4       	ldi	r18, 0x44	; 68
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
    10e0:	88 eb       	ldi	r24, 0xB8	; 184
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	29 81       	ldd	r18, Y+1	; 0x01
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
    10ea:	00 00       	nop
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <TWI_Master_Start>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	8c eb       	ldi	r24, 0xBC	; 188
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	24 ea       	ldi	r18, 0xA4	; 164
    1102:	fc 01       	movw	r30, r24
    1104:	20 83       	st	Z, r18
    1106:	00 00       	nop
    1108:	8c eb       	ldi	r24, 0xBC	; 188
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	fc 01       	movw	r30, r24
    110e:	80 81       	ld	r24, Z
    1110:	88 23       	and	r24, r24
    1112:	d4 f7       	brge	.-12     	; 0x1108 <TWI_Master_Start+0x14>
    1114:	00 00       	nop
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <TWI_Master_Stop>:
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	8c eb       	ldi	r24, 0xBC	; 188
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	24 e9       	ldi	r18, 0x94	; 148
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
    112e:	00 00       	nop
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <TWI_Master_Transmit>:
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	1f 92       	push	r1
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	8b eb       	ldi	r24, 0xBB	; 187
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	29 81       	ldd	r18, Y+1	; 0x01
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	8c eb       	ldi	r24, 0xBC	; 188
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	24 e8       	ldi	r18, 0x84	; 132
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18
    1156:	00 00       	nop
    1158:	8c eb       	ldi	r24, 0xBC	; 188
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	fc 01       	movw	r30, r24
    115e:	80 81       	ld	r24, Z
    1160:	88 23       	and	r24, r24
    1162:	d4 f7       	brge	.-12     	; 0x1158 <TWI_Master_Transmit+0x22>
    1164:	00 00       	nop
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <TWI_Master_Read_Ack>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8c eb       	ldi	r24, 0xBC	; 188
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	24 ec       	ldi	r18, 0xC4	; 196
    117c:	fc 01       	movw	r30, r24
    117e:	20 83       	st	Z, r18
    1180:	00 00       	nop
    1182:	8c eb       	ldi	r24, 0xBC	; 188
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	d4 f7       	brge	.-12     	; 0x1182 <TWI_Master_Read_Ack+0x14>
    118e:	8b eb       	ldi	r24, 0xBB	; 187
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	80 81       	ld	r24, Z
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <TWI_Master_Read_NAck>:
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8c eb       	ldi	r24, 0xBC	; 188
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	24 e8       	ldi	r18, 0x84	; 132
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
    11ae:	00 00       	nop
    11b0:	8c eb       	ldi	r24, 0xBC	; 188
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	88 23       	and	r24, r24
    11ba:	d4 f7       	brge	.-12     	; 0x11b0 <TWI_Master_Read_NAck+0x14>
    11bc:	8b eb       	ldi	r24, 0xBB	; 187
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <__vector_24>:
//Beschreibung:
//Aufgerufene Funktionen:
//Status:
//----------------------------------------------------------------------------------------
ISR(TWI_vect)
{
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	ucTWI_INT_Flag = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ucTWI_INT_Flag>
	ucTWSR_Register = TWI_STATUS_REGISTER;
    11f0:	89 eb       	ldi	r24, 0xB9	; 185
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	80 81       	ld	r24, Z
    11f8:	88 7f       	andi	r24, 0xF8	; 248
    11fa:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ucTWSR_Register>
	
	TWCR |= 1 << TWINT;
    11fe:	8c eb       	ldi	r24, 0xBC	; 188
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	2c eb       	ldi	r18, 0xBC	; 188
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	f9 01       	movw	r30, r18
    1208:	20 81       	ld	r18, Z
    120a:	20 68       	ori	r18, 0x80	; 128
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
    1210:	00 00       	nop
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fe05f>
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <WS2812_Init>:
//Status: freigegeben
//****************************************************************************************
void WS2812_set_off(void)
{
	*WS2812_1.WS2812_PORTReg &= ~(1 << WS2812_1.WS2812_Pin); //der anzusteuernde Pin wird auf Low gesetzt
}
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <WS2812_1>
    123a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WS2812_1+0x1>
    123e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <WS2812_1>
    1242:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <WS2812_1+0x1>
    1246:	f9 01       	movw	r30, r18
    1248:	20 81       	ld	r18, Z
    124a:	62 2f       	mov	r22, r18
    124c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <WS2812_1+0x4>
    1250:	42 2f       	mov	r20, r18
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <WS2812_Init+0x30>
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	4a 95       	dec	r20
    1260:	e2 f7       	brpl	.-8      	; 0x125a <WS2812_Init+0x2c>
    1262:	26 2b       	or	r18, r22
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	00 00       	nop
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <WS2812_Set_Colour>:
//Rückgabeparameter:		keine
//Revision:					
//Status: freigegeben
//****************************************************************************************
void WS2812_Set_Colour(uint8_t *uccolour_list, uint16_t uiled_number)
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 d0       	rcall	.+0      	; 0x1276 <WS2812_Set_Colour+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <WS2812_Set_Colour+0x8>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	7c 83       	std	Y+4, r23	; 0x04
    1282:	6b 83       	std	Y+3, r22	; 0x03
	*WS2812_1.WS2812_PORTReg &= ~(1 << WS2812_1.WS2812_Pin); //der anzusteuernde Pin wird 
    1284:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <WS2812_1+0x2>
    1288:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <WS2812_1+0x3>
    128c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <WS2812_1+0x2>
    1290:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <WS2812_1+0x3>
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	62 2f       	mov	r22, r18
    129a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <WS2812_1+0x4>
    129e:	42 2f       	mov	r20, r18
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <WS2812_Set_Colour+0x3c>
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	4a 95       	dec	r20
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <WS2812_Set_Colour+0x38>
    12b0:	20 95       	com	r18
    12b2:	26 23       	and	r18, r22
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
	//zwecks Reset auf Low geschaltet
	
	PtrPort = (uint16_t) WS2812_1.WS2812_PORTReg; //die Adresse des Port Registers wird gespeichert
    12b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <WS2812_1+0x2>
    12bc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <WS2812_1+0x3>
    12c0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <PtrPort+0x1>
    12c4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <PtrPort>
	ucPin = WS2812_1.WS2812_Pin; //die Pinnummer wird gespeichert
    12c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <WS2812_1+0x4>
    12cc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <ucPin>
	PtrColourList = uccolour_list; //die Adresse der Liste der LED-Farben wird gespeichert
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <PtrColourList+0x1>
    12d8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <PtrColourList>
	PtrLedNumber = &uiled_number; //die Anzahl der LED's wird gespeichert
    12dc:	ce 01       	movw	r24, r28
    12de:	03 96       	adiw	r24, 0x03	; 3
    12e0:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <PtrLedNumber+0x1>
    12e4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PtrLedNumber>
	
	__asm__ __volatile__ (
    12e8:	f8 94       	cli
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ucPin>
    1308:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <PtrColourList>
    130c:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <PtrColourList+0x1>
    1310:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <PtrLedNumber>
    1314:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <PtrLedNumber+0x1>
    1318:	c1 91       	ld	r28, Z+
    131a:	d0 81       	ld	r29, Z
    131c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <PtrPort>
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	41 e0       	ldi	r20, 0x01	; 1

00001324 <repeat>:
    1324:	90 30       	cpi	r25, 0x00	; 0
    1326:	19 f0       	breq	.+6      	; 0x132e <label1>
    1328:	9a 95       	dec	r25
    132a:	44 0f       	add	r20, r20
    132c:	fb cf       	rjmp	.-10     	; 0x1324 <repeat>

0000132e <label1>:
    132e:	34 2f       	mov	r19, r20
    1330:	30 95       	com	r19

00001332 <loop>:
    1332:	7e ef       	ldi	r23, 0xFE	; 254
    1334:	8d 91       	ld	r24, X+

00001336 <out>:
    1336:	88 0f       	add	r24, r24
    1338:	60 f0       	brcs	.+24     	; 0x1352 <set1>

0000133a <set0>:
    133a:	50 81       	ld	r21, Z
    133c:	54 2b       	or	r21, r20
    133e:	50 83       	st	Z, r21
    1340:	50 81       	ld	r21, Z
    1342:	53 23       	and	r21, r19
    1344:	50 83       	st	Z, r21
	...
    134e:	00 00       	nop
    1350:	0c c0       	rjmp	.+24     	; 0x136a <rot1>

00001352 <set1>:
    1352:	50 81       	ld	r21, Z
    1354:	54 2b       	or	r21, r20
    1356:	50 83       	st	Z, r21
	...
    1364:	50 81       	ld	r21, Z
    1366:	53 23       	and	r21, r19
    1368:	50 83       	st	Z, r21

0000136a <rot1>:
    136a:	77 0f       	add	r23, r23
    136c:	20 f3       	brcs	.-56     	; 0x1336 <out>
    136e:	21 97       	sbiw	r28, 0x01	; 1
    1370:	00 f7       	brcc	.-64     	; 0x1332 <loop>
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	78 94       	sei
				"pop	r21"	"\n\t"
				"pop	r20"	"\n\t"
				"pop	r19"	"\n\t"
				"sei" //die Interrupts werden aktiviert
	::);
    138e:	00 00       	nop
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <__subsf3>:
    139e:	50 58       	subi	r21, 0x80	; 128

000013a0 <__addsf3>:
    13a0:	bb 27       	eor	r27, r27
    13a2:	aa 27       	eor	r26, r26
    13a4:	0e d0       	rcall	.+28     	; 0x13c2 <__addsf3x>
    13a6:	75 c1       	rjmp	.+746    	; 0x1692 <__fp_round>
    13a8:	66 d1       	rcall	.+716    	; 0x1676 <__fp_pscA>
    13aa:	30 f0       	brcs	.+12     	; 0x13b8 <__addsf3+0x18>
    13ac:	6b d1       	rcall	.+726    	; 0x1684 <__fp_pscB>
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__addsf3+0x18>
    13b0:	31 f4       	brne	.+12     	; 0x13be <__addsf3+0x1e>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	11 f4       	brne	.+4      	; 0x13ba <__addsf3+0x1a>
    13b6:	1e f4       	brtc	.+6      	; 0x13be <__addsf3+0x1e>
    13b8:	5b c1       	rjmp	.+694    	; 0x1670 <__fp_nan>
    13ba:	0e f4       	brtc	.+2      	; 0x13be <__addsf3+0x1e>
    13bc:	e0 95       	com	r30
    13be:	e7 fb       	bst	r30, 7
    13c0:	51 c1       	rjmp	.+674    	; 0x1664 <__fp_inf>

000013c2 <__addsf3x>:
    13c2:	e9 2f       	mov	r30, r25
    13c4:	77 d1       	rcall	.+750    	; 0x16b4 <__fp_split3>
    13c6:	80 f3       	brcs	.-32     	; 0x13a8 <__addsf3+0x8>
    13c8:	ba 17       	cp	r27, r26
    13ca:	62 07       	cpc	r22, r18
    13cc:	73 07       	cpc	r23, r19
    13ce:	84 07       	cpc	r24, r20
    13d0:	95 07       	cpc	r25, r21
    13d2:	18 f0       	brcs	.+6      	; 0x13da <__addsf3x+0x18>
    13d4:	71 f4       	brne	.+28     	; 0x13f2 <__addsf3x+0x30>
    13d6:	9e f5       	brtc	.+102    	; 0x143e <__addsf3x+0x7c>
    13d8:	8f c1       	rjmp	.+798    	; 0x16f8 <__fp_zero>
    13da:	0e f4       	brtc	.+2      	; 0x13de <__addsf3x+0x1c>
    13dc:	e0 95       	com	r30
    13de:	0b 2e       	mov	r0, r27
    13e0:	ba 2f       	mov	r27, r26
    13e2:	a0 2d       	mov	r26, r0
    13e4:	0b 01       	movw	r0, r22
    13e6:	b9 01       	movw	r22, r18
    13e8:	90 01       	movw	r18, r0
    13ea:	0c 01       	movw	r0, r24
    13ec:	ca 01       	movw	r24, r20
    13ee:	a0 01       	movw	r20, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	ff 27       	eor	r31, r31
    13f4:	59 1b       	sub	r21, r25
    13f6:	99 f0       	breq	.+38     	; 0x141e <__addsf3x+0x5c>
    13f8:	59 3f       	cpi	r21, 0xF9	; 249
    13fa:	50 f4       	brcc	.+20     	; 0x1410 <__addsf3x+0x4e>
    13fc:	50 3e       	cpi	r21, 0xE0	; 224
    13fe:	68 f1       	brcs	.+90     	; 0x145a <__addsf3x+0x98>
    1400:	1a 16       	cp	r1, r26
    1402:	f0 40       	sbci	r31, 0x00	; 0
    1404:	a2 2f       	mov	r26, r18
    1406:	23 2f       	mov	r18, r19
    1408:	34 2f       	mov	r19, r20
    140a:	44 27       	eor	r20, r20
    140c:	58 5f       	subi	r21, 0xF8	; 248
    140e:	f3 cf       	rjmp	.-26     	; 0x13f6 <__addsf3x+0x34>
    1410:	46 95       	lsr	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	a7 95       	ror	r26
    1418:	f0 40       	sbci	r31, 0x00	; 0
    141a:	53 95       	inc	r21
    141c:	c9 f7       	brne	.-14     	; 0x1410 <__addsf3x+0x4e>
    141e:	7e f4       	brtc	.+30     	; 0x143e <__addsf3x+0x7c>
    1420:	1f 16       	cp	r1, r31
    1422:	ba 0b       	sbc	r27, r26
    1424:	62 0b       	sbc	r22, r18
    1426:	73 0b       	sbc	r23, r19
    1428:	84 0b       	sbc	r24, r20
    142a:	ba f0       	brmi	.+46     	; 0x145a <__addsf3x+0x98>
    142c:	91 50       	subi	r25, 0x01	; 1
    142e:	a1 f0       	breq	.+40     	; 0x1458 <__addsf3x+0x96>
    1430:	ff 0f       	add	r31, r31
    1432:	bb 1f       	adc	r27, r27
    1434:	66 1f       	adc	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	c2 f7       	brpl	.-16     	; 0x142c <__addsf3x+0x6a>
    143c:	0e c0       	rjmp	.+28     	; 0x145a <__addsf3x+0x98>
    143e:	ba 0f       	add	r27, r26
    1440:	62 1f       	adc	r22, r18
    1442:	73 1f       	adc	r23, r19
    1444:	84 1f       	adc	r24, r20
    1446:	48 f4       	brcc	.+18     	; 0x145a <__addsf3x+0x98>
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	b7 95       	ror	r27
    1450:	f7 95       	ror	r31
    1452:	9e 3f       	cpi	r25, 0xFE	; 254
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__addsf3x+0x96>
    1456:	b3 cf       	rjmp	.-154    	; 0x13be <__addsf3+0x1e>
    1458:	93 95       	inc	r25
    145a:	88 0f       	add	r24, r24
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__addsf3x+0x9e>
    145e:	99 27       	eor	r25, r25
    1460:	ee 0f       	add	r30, r30
    1462:	97 95       	ror	r25
    1464:	87 95       	ror	r24
    1466:	08 95       	ret

00001468 <__cmpsf2>:
    1468:	d9 d0       	rcall	.+434    	; 0x161c <__fp_cmp>
    146a:	08 f4       	brcc	.+2      	; 0x146e <__cmpsf2+0x6>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	08 95       	ret

00001470 <__divsf3>:
    1470:	0c d0       	rcall	.+24     	; 0x148a <__divsf3x>
    1472:	0f c1       	rjmp	.+542    	; 0x1692 <__fp_round>
    1474:	07 d1       	rcall	.+526    	; 0x1684 <__fp_pscB>
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0x18>
    1478:	fe d0       	rcall	.+508    	; 0x1676 <__fp_pscA>
    147a:	30 f0       	brcs	.+12     	; 0x1488 <__divsf3+0x18>
    147c:	21 f4       	brne	.+8      	; 0x1486 <__divsf3+0x16>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	19 f0       	breq	.+6      	; 0x1488 <__divsf3+0x18>
    1482:	f0 c0       	rjmp	.+480    	; 0x1664 <__fp_inf>
    1484:	51 11       	cpse	r21, r1
    1486:	39 c1       	rjmp	.+626    	; 0x16fa <__fp_szero>
    1488:	f3 c0       	rjmp	.+486    	; 0x1670 <__fp_nan>

0000148a <__divsf3x>:
    148a:	14 d1       	rcall	.+552    	; 0x16b4 <__fp_split3>
    148c:	98 f3       	brcs	.-26     	; 0x1474 <__divsf3+0x4>

0000148e <__divsf3_pse>:
    148e:	99 23       	and	r25, r25
    1490:	c9 f3       	breq	.-14     	; 0x1484 <__divsf3+0x14>
    1492:	55 23       	and	r21, r21
    1494:	b1 f3       	breq	.-20     	; 0x1482 <__divsf3+0x12>
    1496:	95 1b       	sub	r25, r21
    1498:	55 0b       	sbc	r21, r21
    149a:	bb 27       	eor	r27, r27
    149c:	aa 27       	eor	r26, r26
    149e:	62 17       	cp	r22, r18
    14a0:	73 07       	cpc	r23, r19
    14a2:	84 07       	cpc	r24, r20
    14a4:	38 f0       	brcs	.+14     	; 0x14b4 <__divsf3_pse+0x26>
    14a6:	9f 5f       	subi	r25, 0xFF	; 255
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	44 1f       	adc	r20, r20
    14b0:	aa 1f       	adc	r26, r26
    14b2:	a9 f3       	breq	.-22     	; 0x149e <__divsf3_pse+0x10>
    14b4:	33 d0       	rcall	.+102    	; 0x151c <__divsf3_pse+0x8e>
    14b6:	0e 2e       	mov	r0, r30
    14b8:	3a f0       	brmi	.+14     	; 0x14c8 <__divsf3_pse+0x3a>
    14ba:	e0 e8       	ldi	r30, 0x80	; 128
    14bc:	30 d0       	rcall	.+96     	; 0x151e <__divsf3_pse+0x90>
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	50 40       	sbci	r21, 0x00	; 0
    14c2:	e6 95       	lsr	r30
    14c4:	00 1c       	adc	r0, r0
    14c6:	ca f7       	brpl	.-14     	; 0x14ba <__divsf3_pse+0x2c>
    14c8:	29 d0       	rcall	.+82     	; 0x151c <__divsf3_pse+0x8e>
    14ca:	fe 2f       	mov	r31, r30
    14cc:	27 d0       	rcall	.+78     	; 0x151c <__divsf3_pse+0x8e>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	bb 1f       	adc	r27, r27
    14d6:	26 17       	cp	r18, r22
    14d8:	37 07       	cpc	r19, r23
    14da:	48 07       	cpc	r20, r24
    14dc:	ab 07       	cpc	r26, r27
    14de:	b0 e8       	ldi	r27, 0x80	; 128
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__divsf3_pse+0x56>
    14e2:	bb 0b       	sbc	r27, r27
    14e4:	80 2d       	mov	r24, r0
    14e6:	bf 01       	movw	r22, r30
    14e8:	ff 27       	eor	r31, r31
    14ea:	93 58       	subi	r25, 0x83	; 131
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	2a f0       	brmi	.+10     	; 0x14fa <__divsf3_pse+0x6c>
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	51 05       	cpc	r21, r1
    14f4:	68 f0       	brcs	.+26     	; 0x1510 <__divsf3_pse+0x82>
    14f6:	b6 c0       	rjmp	.+364    	; 0x1664 <__fp_inf>
    14f8:	00 c1       	rjmp	.+512    	; 0x16fa <__fp_szero>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	ec f3       	brlt	.-6      	; 0x14f8 <__divsf3_pse+0x6a>
    14fe:	98 3e       	cpi	r25, 0xE8	; 232
    1500:	dc f3       	brlt	.-10     	; 0x14f8 <__divsf3_pse+0x6a>
    1502:	86 95       	lsr	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f7 95       	ror	r31
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	c9 f7       	brne	.-14     	; 0x1502 <__divsf3_pse+0x74>
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret
    151c:	e1 e0       	ldi	r30, 0x01	; 1
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	bb 1f       	adc	r27, r27
    1526:	62 17       	cp	r22, r18
    1528:	73 07       	cpc	r23, r19
    152a:	84 07       	cpc	r24, r20
    152c:	ba 07       	cpc	r27, r26
    152e:	20 f0       	brcs	.+8      	; 0x1538 <__divsf3_pse+0xaa>
    1530:	62 1b       	sub	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba 0b       	sbc	r27, r26
    1538:	ee 1f       	adc	r30, r30
    153a:	88 f7       	brcc	.-30     	; 0x151e <__divsf3_pse+0x90>
    153c:	e0 95       	com	r30
    153e:	08 95       	ret

00001540 <__fixsfsi>:
    1540:	04 d0       	rcall	.+8      	; 0x154a <__fixunssfsi>
    1542:	68 94       	set
    1544:	b1 11       	cpse	r27, r1
    1546:	d9 c0       	rjmp	.+434    	; 0x16fa <__fp_szero>
    1548:	08 95       	ret

0000154a <__fixunssfsi>:
    154a:	bc d0       	rcall	.+376    	; 0x16c4 <__fp_splitA>
    154c:	88 f0       	brcs	.+34     	; 0x1570 <__fixunssfsi+0x26>
    154e:	9f 57       	subi	r25, 0x7F	; 127
    1550:	90 f0       	brcs	.+36     	; 0x1576 <__fixunssfsi+0x2c>
    1552:	b9 2f       	mov	r27, r25
    1554:	99 27       	eor	r25, r25
    1556:	b7 51       	subi	r27, 0x17	; 23
    1558:	a0 f0       	brcs	.+40     	; 0x1582 <__fixunssfsi+0x38>
    155a:	d1 f0       	breq	.+52     	; 0x1590 <__fixunssfsi+0x46>
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	1a f0       	brmi	.+6      	; 0x156c <__fixunssfsi+0x22>
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__fixunssfsi+0x12>
    156a:	12 c0       	rjmp	.+36     	; 0x1590 <__fixunssfsi+0x46>
    156c:	b1 30       	cpi	r27, 0x01	; 1
    156e:	81 f0       	breq	.+32     	; 0x1590 <__fixunssfsi+0x46>
    1570:	c3 d0       	rcall	.+390    	; 0x16f8 <__fp_zero>
    1572:	b1 e0       	ldi	r27, 0x01	; 1
    1574:	08 95       	ret
    1576:	c0 c0       	rjmp	.+384    	; 0x16f8 <__fp_zero>
    1578:	67 2f       	mov	r22, r23
    157a:	78 2f       	mov	r23, r24
    157c:	88 27       	eor	r24, r24
    157e:	b8 5f       	subi	r27, 0xF8	; 248
    1580:	39 f0       	breq	.+14     	; 0x1590 <__fixunssfsi+0x46>
    1582:	b9 3f       	cpi	r27, 0xF9	; 249
    1584:	cc f3       	brlt	.-14     	; 0x1578 <__fixunssfsi+0x2e>
    1586:	86 95       	lsr	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b3 95       	inc	r27
    158e:	d9 f7       	brne	.-10     	; 0x1586 <__fixunssfsi+0x3c>
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__fixunssfsi+0x56>
    1592:	90 95       	com	r25
    1594:	80 95       	com	r24
    1596:	70 95       	com	r23
    1598:	61 95       	neg	r22
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	08 95       	ret

000015a2 <__floatunsisf>:
    15a2:	e8 94       	clt
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <__floatsisf+0x12>

000015a6 <__floatsisf>:
    15a6:	97 fb       	bst	r25, 7
    15a8:	3e f4       	brtc	.+14     	; 0x15b8 <__floatsisf+0x12>
    15aa:	90 95       	com	r25
    15ac:	80 95       	com	r24
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	99 23       	and	r25, r25
    15ba:	a9 f0       	breq	.+42     	; 0x15e6 <__floatsisf+0x40>
    15bc:	f9 2f       	mov	r31, r25
    15be:	96 e9       	ldi	r25, 0x96	; 150
    15c0:	bb 27       	eor	r27, r27
    15c2:	93 95       	inc	r25
    15c4:	f6 95       	lsr	r31
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	b7 95       	ror	r27
    15ce:	f1 11       	cpse	r31, r1
    15d0:	f8 cf       	rjmp	.-16     	; 0x15c2 <__floatsisf+0x1c>
    15d2:	fa f4       	brpl	.+62     	; 0x1612 <__floatsisf+0x6c>
    15d4:	bb 0f       	add	r27, r27
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__floatsisf+0x36>
    15d8:	60 ff       	sbrs	r22, 0
    15da:	1b c0       	rjmp	.+54     	; 0x1612 <__floatsisf+0x6c>
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <__floatsisf+0x6c>
    15e6:	88 23       	and	r24, r24
    15e8:	11 f0       	breq	.+4      	; 0x15ee <__floatsisf+0x48>
    15ea:	96 e9       	ldi	r25, 0x96	; 150
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <__floatsisf+0x6a>
    15ee:	77 23       	and	r23, r23
    15f0:	21 f0       	breq	.+8      	; 0x15fa <__floatsisf+0x54>
    15f2:	9e e8       	ldi	r25, 0x8E	; 142
    15f4:	87 2f       	mov	r24, r23
    15f6:	76 2f       	mov	r23, r22
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <__floatsisf+0x5e>
    15fa:	66 23       	and	r22, r22
    15fc:	71 f0       	breq	.+28     	; 0x161a <__floatsisf+0x74>
    15fe:	96 e8       	ldi	r25, 0x86	; 134
    1600:	86 2f       	mov	r24, r22
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	2a f0       	brmi	.+10     	; 0x1612 <__floatsisf+0x6c>
    1608:	9a 95       	dec	r25
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	da f7       	brpl	.-10     	; 0x1608 <__floatsisf+0x62>
    1612:	88 0f       	add	r24, r24
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret

0000161c <__fp_cmp>:
    161c:	99 0f       	add	r25, r25
    161e:	00 08       	sbc	r0, r0
    1620:	55 0f       	add	r21, r21
    1622:	aa 0b       	sbc	r26, r26
    1624:	e0 e8       	ldi	r30, 0x80	; 128
    1626:	fe ef       	ldi	r31, 0xFE	; 254
    1628:	16 16       	cp	r1, r22
    162a:	17 06       	cpc	r1, r23
    162c:	e8 07       	cpc	r30, r24
    162e:	f9 07       	cpc	r31, r25
    1630:	c0 f0       	brcs	.+48     	; 0x1662 <__fp_cmp+0x46>
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	e4 07       	cpc	r30, r20
    1638:	f5 07       	cpc	r31, r21
    163a:	98 f0       	brcs	.+38     	; 0x1662 <__fp_cmp+0x46>
    163c:	62 1b       	sub	r22, r18
    163e:	73 0b       	sbc	r23, r19
    1640:	84 0b       	sbc	r24, r20
    1642:	95 0b       	sbc	r25, r21
    1644:	39 f4       	brne	.+14     	; 0x1654 <__fp_cmp+0x38>
    1646:	0a 26       	eor	r0, r26
    1648:	61 f0       	breq	.+24     	; 0x1662 <__fp_cmp+0x46>
    164a:	23 2b       	or	r18, r19
    164c:	24 2b       	or	r18, r20
    164e:	25 2b       	or	r18, r21
    1650:	21 f4       	brne	.+8      	; 0x165a <__fp_cmp+0x3e>
    1652:	08 95       	ret
    1654:	0a 26       	eor	r0, r26
    1656:	09 f4       	brne	.+2      	; 0x165a <__fp_cmp+0x3e>
    1658:	a1 40       	sbci	r26, 0x01	; 1
    165a:	a6 95       	lsr	r26
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	81 1d       	adc	r24, r1
    1660:	81 1d       	adc	r24, r1
    1662:	08 95       	ret

00001664 <__fp_inf>:
    1664:	97 f9       	bld	r25, 7
    1666:	9f 67       	ori	r25, 0x7F	; 127
    1668:	80 e8       	ldi	r24, 0x80	; 128
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	08 95       	ret

00001670 <__fp_nan>:
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	80 ec       	ldi	r24, 0xC0	; 192
    1674:	08 95       	ret

00001676 <__fp_pscA>:
    1676:	00 24       	eor	r0, r0
    1678:	0a 94       	dec	r0
    167a:	16 16       	cp	r1, r22
    167c:	17 06       	cpc	r1, r23
    167e:	18 06       	cpc	r1, r24
    1680:	09 06       	cpc	r0, r25
    1682:	08 95       	ret

00001684 <__fp_pscB>:
    1684:	00 24       	eor	r0, r0
    1686:	0a 94       	dec	r0
    1688:	12 16       	cp	r1, r18
    168a:	13 06       	cpc	r1, r19
    168c:	14 06       	cpc	r1, r20
    168e:	05 06       	cpc	r0, r21
    1690:	08 95       	ret

00001692 <__fp_round>:
    1692:	09 2e       	mov	r0, r25
    1694:	03 94       	inc	r0
    1696:	00 0c       	add	r0, r0
    1698:	11 f4       	brne	.+4      	; 0x169e <__fp_round+0xc>
    169a:	88 23       	and	r24, r24
    169c:	52 f0       	brmi	.+20     	; 0x16b2 <__fp_round+0x20>
    169e:	bb 0f       	add	r27, r27
    16a0:	40 f4       	brcc	.+16     	; 0x16b2 <__fp_round+0x20>
    16a2:	bf 2b       	or	r27, r31
    16a4:	11 f4       	brne	.+4      	; 0x16aa <__fp_round+0x18>
    16a6:	60 ff       	sbrs	r22, 0
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <__fp_round+0x20>
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	08 95       	ret

000016b4 <__fp_split3>:
    16b4:	57 fd       	sbrc	r21, 7
    16b6:	90 58       	subi	r25, 0x80	; 128
    16b8:	44 0f       	add	r20, r20
    16ba:	55 1f       	adc	r21, r21
    16bc:	59 f0       	breq	.+22     	; 0x16d4 <__fp_splitA+0x10>
    16be:	5f 3f       	cpi	r21, 0xFF	; 255
    16c0:	71 f0       	breq	.+28     	; 0x16de <__fp_splitA+0x1a>
    16c2:	47 95       	ror	r20

000016c4 <__fp_splitA>:
    16c4:	88 0f       	add	r24, r24
    16c6:	97 fb       	bst	r25, 7
    16c8:	99 1f       	adc	r25, r25
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <__fp_splitA+0x20>
    16cc:	9f 3f       	cpi	r25, 0xFF	; 255
    16ce:	79 f0       	breq	.+30     	; 0x16ee <__fp_splitA+0x2a>
    16d0:	87 95       	ror	r24
    16d2:	08 95       	ret
    16d4:	12 16       	cp	r1, r18
    16d6:	13 06       	cpc	r1, r19
    16d8:	14 06       	cpc	r1, r20
    16da:	55 1f       	adc	r21, r21
    16dc:	f2 cf       	rjmp	.-28     	; 0x16c2 <__fp_split3+0xe>
    16de:	46 95       	lsr	r20
    16e0:	f1 df       	rcall	.-30     	; 0x16c4 <__fp_splitA>
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <__fp_splitA+0x30>
    16e4:	16 16       	cp	r1, r22
    16e6:	17 06       	cpc	r1, r23
    16e8:	18 06       	cpc	r1, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	f1 cf       	rjmp	.-30     	; 0x16d0 <__fp_splitA+0xc>
    16ee:	86 95       	lsr	r24
    16f0:	71 05       	cpc	r23, r1
    16f2:	61 05       	cpc	r22, r1
    16f4:	08 94       	sec
    16f6:	08 95       	ret

000016f8 <__fp_zero>:
    16f8:	e8 94       	clt

000016fa <__fp_szero>:
    16fa:	bb 27       	eor	r27, r27
    16fc:	66 27       	eor	r22, r22
    16fe:	77 27       	eor	r23, r23
    1700:	cb 01       	movw	r24, r22
    1702:	97 f9       	bld	r25, 7
    1704:	08 95       	ret

00001706 <__mulsf3>:
    1706:	0b d0       	rcall	.+22     	; 0x171e <__mulsf3x>
    1708:	c4 cf       	rjmp	.-120    	; 0x1692 <__fp_round>
    170a:	b5 df       	rcall	.-150    	; 0x1676 <__fp_pscA>
    170c:	28 f0       	brcs	.+10     	; 0x1718 <__mulsf3+0x12>
    170e:	ba df       	rcall	.-140    	; 0x1684 <__fp_pscB>
    1710:	18 f0       	brcs	.+6      	; 0x1718 <__mulsf3+0x12>
    1712:	95 23       	and	r25, r21
    1714:	09 f0       	breq	.+2      	; 0x1718 <__mulsf3+0x12>
    1716:	a6 cf       	rjmp	.-180    	; 0x1664 <__fp_inf>
    1718:	ab cf       	rjmp	.-170    	; 0x1670 <__fp_nan>
    171a:	11 24       	eor	r1, r1
    171c:	ee cf       	rjmp	.-36     	; 0x16fa <__fp_szero>

0000171e <__mulsf3x>:
    171e:	ca df       	rcall	.-108    	; 0x16b4 <__fp_split3>
    1720:	a0 f3       	brcs	.-24     	; 0x170a <__mulsf3+0x4>

00001722 <__mulsf3_pse>:
    1722:	95 9f       	mul	r25, r21
    1724:	d1 f3       	breq	.-12     	; 0x171a <__mulsf3+0x14>
    1726:	95 0f       	add	r25, r21
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	55 1f       	adc	r21, r21
    172c:	62 9f       	mul	r22, r18
    172e:	f0 01       	movw	r30, r0
    1730:	72 9f       	mul	r23, r18
    1732:	bb 27       	eor	r27, r27
    1734:	f0 0d       	add	r31, r0
    1736:	b1 1d       	adc	r27, r1
    1738:	63 9f       	mul	r22, r19
    173a:	aa 27       	eor	r26, r26
    173c:	f0 0d       	add	r31, r0
    173e:	b1 1d       	adc	r27, r1
    1740:	aa 1f       	adc	r26, r26
    1742:	64 9f       	mul	r22, r20
    1744:	66 27       	eor	r22, r22
    1746:	b0 0d       	add	r27, r0
    1748:	a1 1d       	adc	r26, r1
    174a:	66 1f       	adc	r22, r22
    174c:	82 9f       	mul	r24, r18
    174e:	22 27       	eor	r18, r18
    1750:	b0 0d       	add	r27, r0
    1752:	a1 1d       	adc	r26, r1
    1754:	62 1f       	adc	r22, r18
    1756:	73 9f       	mul	r23, r19
    1758:	b0 0d       	add	r27, r0
    175a:	a1 1d       	adc	r26, r1
    175c:	62 1f       	adc	r22, r18
    175e:	83 9f       	mul	r24, r19
    1760:	a0 0d       	add	r26, r0
    1762:	61 1d       	adc	r22, r1
    1764:	22 1f       	adc	r18, r18
    1766:	74 9f       	mul	r23, r20
    1768:	33 27       	eor	r19, r19
    176a:	a0 0d       	add	r26, r0
    176c:	61 1d       	adc	r22, r1
    176e:	23 1f       	adc	r18, r19
    1770:	84 9f       	mul	r24, r20
    1772:	60 0d       	add	r22, r0
    1774:	21 1d       	adc	r18, r1
    1776:	82 2f       	mov	r24, r18
    1778:	76 2f       	mov	r23, r22
    177a:	6a 2f       	mov	r22, r26
    177c:	11 24       	eor	r1, r1
    177e:	9f 57       	subi	r25, 0x7F	; 127
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	8a f0       	brmi	.+34     	; 0x17a6 <__mulsf3_pse+0x84>
    1784:	e1 f0       	breq	.+56     	; 0x17be <__mulsf3_pse+0x9c>
    1786:	88 23       	and	r24, r24
    1788:	4a f0       	brmi	.+18     	; 0x179c <__mulsf3_pse+0x7a>
    178a:	ee 0f       	add	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	bb 1f       	adc	r27, r27
    1790:	66 1f       	adc	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	50 40       	sbci	r21, 0x00	; 0
    179a:	a9 f7       	brne	.-22     	; 0x1786 <__mulsf3_pse+0x64>
    179c:	9e 3f       	cpi	r25, 0xFE	; 254
    179e:	51 05       	cpc	r21, r1
    17a0:	70 f0       	brcs	.+28     	; 0x17be <__mulsf3_pse+0x9c>
    17a2:	60 cf       	rjmp	.-320    	; 0x1664 <__fp_inf>
    17a4:	aa cf       	rjmp	.-172    	; 0x16fa <__fp_szero>
    17a6:	5f 3f       	cpi	r21, 0xFF	; 255
    17a8:	ec f3       	brlt	.-6      	; 0x17a4 <__mulsf3_pse+0x82>
    17aa:	98 3e       	cpi	r25, 0xE8	; 232
    17ac:	dc f3       	brlt	.-10     	; 0x17a4 <__mulsf3_pse+0x82>
    17ae:	86 95       	lsr	r24
    17b0:	77 95       	ror	r23
    17b2:	67 95       	ror	r22
    17b4:	b7 95       	ror	r27
    17b6:	f7 95       	ror	r31
    17b8:	e7 95       	ror	r30
    17ba:	9f 5f       	subi	r25, 0xFF	; 255
    17bc:	c1 f7       	brne	.-16     	; 0x17ae <__mulsf3_pse+0x8c>
    17be:	fe 2b       	or	r31, r30
    17c0:	88 0f       	add	r24, r24
    17c2:	91 1d       	adc	r25, r1
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret

000017cc <__udivmodhi4>:
    17cc:	aa 1b       	sub	r26, r26
    17ce:	bb 1b       	sub	r27, r27
    17d0:	51 e1       	ldi	r21, 0x11	; 17
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <__udivmodhi4_ep>

000017d4 <__udivmodhi4_loop>:
    17d4:	aa 1f       	adc	r26, r26
    17d6:	bb 1f       	adc	r27, r27
    17d8:	a6 17       	cp	r26, r22
    17da:	b7 07       	cpc	r27, r23
    17dc:	10 f0       	brcs	.+4      	; 0x17e2 <__udivmodhi4_ep>
    17de:	a6 1b       	sub	r26, r22
    17e0:	b7 0b       	sbc	r27, r23

000017e2 <__udivmodhi4_ep>:
    17e2:	88 1f       	adc	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	5a 95       	dec	r21
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__udivmodhi4_loop>
    17ea:	80 95       	com	r24
    17ec:	90 95       	com	r25
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	08 95       	ret

000017f4 <__divmodhi4>:
    17f4:	97 fb       	bst	r25, 7
    17f6:	07 2e       	mov	r0, r23
    17f8:	16 f4       	brtc	.+4      	; 0x17fe <__divmodhi4+0xa>
    17fa:	00 94       	com	r0
    17fc:	06 d0       	rcall	.+12     	; 0x180a <__divmodhi4_neg1>
    17fe:	77 fd       	sbrc	r23, 7
    1800:	08 d0       	rcall	.+16     	; 0x1812 <__divmodhi4_neg2>
    1802:	e4 df       	rcall	.-56     	; 0x17cc <__udivmodhi4>
    1804:	07 fc       	sbrc	r0, 7
    1806:	05 d0       	rcall	.+10     	; 0x1812 <__divmodhi4_neg2>
    1808:	3e f4       	brtc	.+14     	; 0x1818 <__divmodhi4_exit>

0000180a <__divmodhi4_neg1>:
    180a:	90 95       	com	r25
    180c:	81 95       	neg	r24
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <__divmodhi4_neg2>:
    1812:	70 95       	com	r23
    1814:	61 95       	neg	r22
    1816:	7f 4f       	sbci	r23, 0xFF	; 255

00001818 <__divmodhi4_exit>:
    1818:	08 95       	ret

0000181a <_exit>:
    181a:	f8 94       	cli

0000181c <__stop_program>:
    181c:	ff cf       	rjmp	.-2      	; 0x181c <__stop_program>
